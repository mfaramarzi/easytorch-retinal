{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/STARE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.91544, 0.70187, 0.79455, 0.9673], ["SPLIT_8.json", 0.8475, 0.90236, 0.87407, 0.97747]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_7", "checkpoint": "SPLIT_7.pt", "best_epoch": 21, "best_score": 0.88012, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.32369, 0.39141, 0.61727, 0.47905, 0.89201], [0.14643, 0.76885, 0.60089, 0.67457, 0.95337], [0.1254, 0.78373, 0.65645, 0.71447, 0.9578], [0.1124, 0.80031, 0.67687, 0.73343, 0.96042], [0.09883, 0.81523, 0.72227, 0.76594, 0.96449], [0.09212, 0.8204, 0.7367, 0.7763, 0.96585], [0.08632, 0.83462, 0.74649, 0.7881, 0.96771], [0.08356, 0.83059, 0.76215, 0.7949, 0.96837], [0.07874, 0.84015, 0.77115, 0.80417, 0.96979], [0.07617, 0.84353, 0.77519, 0.80792, 0.97035], [0.07345, 0.84283, 0.78823, 0.81462, 0.97114], [0.07033, 0.85276, 0.79113, 0.82079, 0.97221], [0.06984, 0.85101, 0.79192, 0.8204, 0.97211], [0.06818, 0.84917, 0.80327, 0.82558, 0.9727], [0.06755, 0.85524, 0.79879, 0.82605, 0.97294], [0.06649, 0.8535, 0.80526, 0.82868, 0.97322], [0.06721, 0.85438, 0.79866, 0.82558, 0.97286], [0.0655, 0.86171, 0.79809, 0.82868, 0.97346], [0.06277, 0.86049, 0.81298, 0.83606, 0.97435], [0.06209, 0.85993, 0.81752, 0.83819, 0.97461], [0.06084, 0.86739, 0.81326, 0.83945, 0.97498], [0.06143, 0.86361, 0.81402, 0.83808, 0.9747], [0.06222, 0.86443, 0.80925, 0.83593, 0.97445], [0.0612, 0.85866, 0.82047, 0.83913, 0.9747], [0.061, 0.8666, 0.81129, 0.83803, 0.97478], [0.06068, 0.86151, 0.81946, 0.83996, 0.97488], [0.06147, 0.8666, 0.80812, 0.83634, 0.97456], [0.06039, 0.86361, 0.8185, 0.84045, 0.975], [0.05825, 0.86486, 0.82797, 0.84601, 0.97576], [0.05784, 0.87079, 0.8214, 0.84537, 0.97583], [0.05691, 0.8695, 0.82786, 0.84817, 0.97616]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.14636, 0.88758, 0.52242, 0.65772, 0.95288], [0.10281, 0.84673, 0.76076, 0.80145, 0.96733], [0.1089, 0.80176, 0.77523, 0.78827, 0.96391], [0.0823, 0.85127, 0.80807, 0.82911, 0.97113], [0.08463, 0.80447, 0.83687, 0.82035, 0.96824], [0.07488, 0.9043, 0.74166, 0.81494, 0.97081], [0.06469, 0.83619, 0.88364, 0.85926, 0.97492], [0.0779, 0.78445, 0.89194, 0.83475, 0.9694], [0.06908, 0.83054, 0.86928, 0.84947, 0.9733], [0.06299, 0.82342, 0.89694, 0.85861, 0.9744], [0.05901, 0.85159, 0.88666, 0.86877, 0.97679], [0.05737, 0.85442, 0.8851, 0.86949, 0.97697], [0.0591, 0.84153, 0.89615, 0.86798, 0.97638], [0.07077, 0.78827, 0.90528, 0.84273, 0.97072], [0.06172, 0.82127, 0.9005, 0.85906, 0.97439], [0.06002, 0.88254, 0.84198, 0.86178, 0.97659], [0.05502, 0.87767, 0.86159, 0.86956, 0.9776], [0.06358, 0.79661, 0.93137, 0.85874, 0.97345], [0.05697, 0.84043, 0.89661, 0.86761, 0.97629], [0.05368, 0.84584, 0.90553, 0.87467, 0.97751], [0.05036, 0.87366, 0.88667, 0.88012, 0.97907], [0.05725, 0.82674, 0.91181, 0.86719, 0.9758], [0.06121, 0.81047, 0.91178, 0.85815, 0.97388], [0.06189, 0.81718, 0.912, 0.86199, 0.97469], [0.05774, 0.83541, 0.91099, 0.87156, 0.97673], [0.0533, 0.86598, 0.87892, 0.8724, 0.97772], [0.06948, 0.76883, 0.94477, 0.84777, 0.9706], [0.07577, 0.74789, 0.95829, 0.84012, 0.96839], [0.05317, 0.86573, 0.88385, 0.8747, 0.97806], [0.05547, 0.83064, 0.91345, 0.87008, 0.97636], [0.05664, 0.82266, 0.91572, 0.8667, 0.97559]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "STARE", "data_dir": "datasets/STARE/stare-images", "label_dir": "datasets/STARE/labels-ah", "label_getter": "<function <lambda> at 0x7f39fc034320>", "split_dir": "net_logs/STARE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}