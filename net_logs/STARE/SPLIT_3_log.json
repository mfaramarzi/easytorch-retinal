{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/STARE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.91544, 0.70187, 0.79455, 0.9673], ["SPLIT_8.json", 0.8475, 0.90236, 0.87407, 0.97747], ["SPLIT_7.json", 0.89491, 0.6675, 0.76466, 0.96786], ["SPLIT_6.json", 0.82523, 0.75633, 0.78928, 0.95691], ["SPLIT_9.json", 0.9019, 0.76676, 0.82886, 0.97412], ["SPLIT_4.json", 0.83383, 0.83218, 0.833, 0.97494], ["SPLIT_5.json", 0.77856, 0.82766, 0.80236, 0.97478], ["SPLIT_0.json", 0.81089, 0.89488, 0.85082, 0.97379], ["SPLIT_1.json", 0.85528, 0.85636, 0.85582, 0.98079]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_3", "checkpoint": "SPLIT_3.pt", "best_epoch": 20, "best_score": 0.83519, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.31844, 0.39191, 0.62475, 0.48167, 0.88985], [0.14597, 0.7633, 0.62486, 0.68718, 0.9534], [0.12278, 0.78978, 0.66359, 0.72121, 0.95797], [0.11472, 0.79561, 0.68129, 0.73403, 0.95955], [0.09964, 0.81486, 0.72309, 0.76624, 0.96386], [0.09436, 0.82517, 0.7294, 0.77434, 0.96517], [0.08988, 0.82466, 0.74389, 0.7822, 0.96606], [0.08417, 0.83539, 0.75857, 0.79513, 0.96798], [0.08173, 0.83628, 0.76705, 0.80017, 0.96862], [0.07928, 0.83862, 0.7731, 0.80453, 0.96923], [0.07507, 0.84505, 0.78385, 0.8133, 0.97052], [0.07208, 0.84793, 0.79315, 0.81963, 0.9714], [0.07229, 0.85384, 0.78407, 0.81747, 0.97132], [0.07307, 0.84684, 0.78732, 0.816, 0.97091], [0.07015, 0.8537, 0.79211, 0.82175, 0.97185], [0.06949, 0.85204, 0.79783, 0.82404, 0.97209], [0.06802, 0.85486, 0.79896, 0.82597, 0.97242], [0.0683, 0.85819, 0.7958, 0.82582, 0.9725], [0.06643, 0.86218, 0.79768, 0.82868, 0.97298], [0.06449, 0.86047, 0.80841, 0.83363, 0.97357], [0.06459, 0.8593, 0.80833, 0.83304, 0.97346], [0.06425, 0.85909, 0.81137, 0.83455, 0.97365], [0.06306, 0.86426, 0.81016, 0.83634, 0.97402], [0.06204, 0.8632, 0.81563, 0.83874, 0.97431], [0.06215, 0.8648, 0.81256, 0.83787, 0.97424], [0.06301, 0.8614, 0.81185, 0.83589, 0.97389], [0.06036, 0.86676, 0.819, 0.8422, 0.97486], [0.05963, 0.86927, 0.81985, 0.84384, 0.97514], [0.06151, 0.8605, 0.82052, 0.84003, 0.9744], [0.05992, 0.86802, 0.81814, 0.84234, 0.97491], [0.05825, 0.87028, 0.82579, 0.84745, 0.97565]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.19933, 0.66862, 0.48293, 0.5608, 0.9432], [0.1387, 0.68441, 0.69665, 0.69048, 0.9531], [0.13919, 0.62263, 0.75879, 0.684, 0.94735], [0.12968, 0.64124, 0.80457, 0.71368, 0.95152], [0.12647, 0.63839, 0.85033, 0.72927, 0.95259], [0.0967, 0.82659, 0.69023, 0.75228, 0.96586], [0.08288, 0.83492, 0.74186, 0.78564, 0.9696], [0.09275, 0.71829, 0.85972, 0.78267, 0.96414], [0.09223, 0.72651, 0.86562, 0.78999, 0.96544], [0.0814, 0.81522, 0.7714, 0.7927, 0.9697], [0.0708, 0.82275, 0.8091, 0.81587, 0.97257], [0.07822, 0.80328, 0.80741, 0.80534, 0.97069], [0.06942, 0.84004, 0.78411, 0.81111, 0.97258], [0.07509, 0.81703, 0.78825, 0.80238, 0.97084], [0.06781, 0.81135, 0.83773, 0.82433, 0.97319], [0.07109, 0.87022, 0.7418, 0.80089, 0.9723], [0.07144, 0.90207, 0.68773, 0.78045, 0.97094], [0.07171, 0.85953, 0.74772, 0.79974, 0.97188], [0.0695, 0.84003, 0.78359, 0.81083, 0.97254], [0.06234, 0.82531, 0.8453, 0.83519, 0.97495], [0.06171, 0.87051, 0.78134, 0.82352, 0.97485], [0.07099, 0.82173, 0.79699, 0.80917, 0.97177], [0.06429, 0.83942, 0.80166, 0.82011, 0.97359], [0.07164, 0.84142, 0.76037, 0.79884, 0.97124], [0.06303, 0.85145, 0.80193, 0.82595, 0.97462], [0.06669, 0.8329, 0.79209, 0.81198, 0.97245], [0.06902, 0.77575, 0.88568, 0.82708, 0.97219], [0.06232, 0.87771, 0.77653, 0.82403, 0.97509], [0.06281, 0.85656, 0.79489, 0.82457, 0.9746], [0.06636, 0.85241, 0.77719, 0.81306, 0.97316], [0.06229, 0.82217, 0.84778, 0.83478, 0.9748]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "STARE", "data_dir": "datasets/STARE/stare-images", "label_dir": "datasets/STARE/labels-ah", "label_getter": "<function <lambda> at 0x7f39fc034320>", "split_dir": "net_logs/STARE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}