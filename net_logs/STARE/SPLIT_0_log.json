{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/STARE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.91544, 0.70187, 0.79455, 0.9673], ["SPLIT_8.json", 0.8475, 0.90236, 0.87407, 0.97747], ["SPLIT_7.json", 0.89491, 0.6675, 0.76466, 0.96786], ["SPLIT_6.json", 0.82523, 0.75633, 0.78928, 0.95691], ["SPLIT_9.json", 0.9019, 0.76676, 0.82886, 0.97412], ["SPLIT_4.json", 0.83383, 0.83218, 0.833, 0.97494], ["SPLIT_5.json", 0.77856, 0.82766, 0.80236, 0.97478]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_0", "checkpoint": "SPLIT_0.pt", "best_epoch": 30, "best_score": 0.84646, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.32352, 0.34757, 0.57449, 0.43311, 0.87625], [0.15195, 0.7546, 0.59985, 0.66838, 0.95102], [0.13413, 0.76574, 0.63119, 0.69199, 0.95376], [0.12463, 0.77703, 0.64883, 0.70717, 0.95578], [0.11363, 0.79891, 0.68176, 0.7357, 0.95969], [0.1051, 0.8056, 0.70295, 0.75078, 0.9616], [0.09792, 0.81288, 0.71705, 0.76196, 0.96314], [0.09166, 0.83093, 0.73153, 0.77807, 0.96566], [0.09029, 0.82766, 0.73732, 0.77988, 0.96575], [0.08956, 0.82911, 0.7379, 0.78085, 0.96592], [0.08488, 0.83113, 0.75185, 0.7895, 0.96701], [0.08034, 0.84013, 0.76482, 0.80071, 0.96867], [0.08006, 0.84944, 0.75459, 0.79921, 0.9688], [0.07472, 0.84763, 0.78013, 0.81248, 0.97037], [0.07351, 0.85273, 0.77875, 0.81406, 0.97073], [0.07335, 0.84635, 0.78877, 0.81655, 0.97084], [0.07324, 0.84928, 0.78422, 0.81545, 0.97079], [0.07051, 0.85327, 0.79172, 0.82134, 0.97166], [0.07043, 0.86094, 0.78049, 0.81874, 0.97156], [0.06839, 0.85471, 0.80014, 0.82653, 0.97236], [0.06662, 0.85732, 0.80491, 0.83029, 0.97292], [0.06704, 0.8581, 0.80046, 0.82828, 0.97269], [0.06756, 0.85952, 0.79532, 0.82617, 0.97246], [0.06662, 0.85735, 0.80251, 0.82902, 0.97276], [0.06504, 0.86434, 0.80264, 0.83235, 0.97339], [0.06654, 0.85438, 0.80624, 0.82961, 0.97275], [0.06447, 0.86271, 0.81025, 0.83566, 0.97378], [0.06333, 0.86418, 0.81031, 0.83638, 0.97391], [0.06252, 0.86285, 0.81479, 0.83813, 0.9741], [0.06226, 0.86552, 0.81337, 0.83864, 0.97424], [0.06193, 0.86561, 0.81449, 0.83927, 0.97433]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.15655, 0.79833, 0.46484, 0.58756, 0.95656], [0.10764, 0.8094, 0.69291, 0.74664, 0.9687], [0.09376, 0.85046, 0.66699, 0.74763, 0.97003], [0.09747, 0.85336, 0.6677, 0.7492, 0.97024], [0.07961, 0.85233, 0.70159, 0.76965, 0.97205], [0.07269, 0.8874, 0.70124, 0.78341, 0.97419], [0.07188, 0.9007, 0.68368, 0.77733, 0.97393], [0.06789, 0.87688, 0.7373, 0.80106, 0.97562], [0.06925, 0.86505, 0.73725, 0.79605, 0.97486], [0.06667, 0.86151, 0.75501, 0.80475, 0.97561], [0.065, 0.87525, 0.75863, 0.81278, 0.97674], [0.06254, 0.84985, 0.7777, 0.81218, 0.97606], [0.06152, 0.79992, 0.85335, 0.82577, 0.97603], [0.05978, 0.84342, 0.80383, 0.82315, 0.97701], [0.05787, 0.83474, 0.82819, 0.83145, 0.97765], [0.05776, 0.87963, 0.7811, 0.82744, 0.97832], [0.05914, 0.90498, 0.72694, 0.80625, 0.97675], [0.06246, 0.86865, 0.74486, 0.80201, 0.97552], [0.06315, 0.85616, 0.77265, 0.81226, 0.97623], [0.05514, 0.81948, 0.85962, 0.83907, 0.97805], [0.05048, 0.866, 0.82302, 0.84396, 0.97974], [0.05398, 0.83622, 0.84516, 0.84067, 0.97868], [0.05881, 0.90698, 0.71664, 0.80065, 0.97625], [0.0525, 0.84392, 0.84265, 0.84328, 0.97915], [0.05339, 0.81952, 0.86805, 0.84309, 0.97849], [0.05183, 0.85645, 0.82056, 0.83812, 0.9789], [0.05263, 0.88083, 0.79703, 0.83684, 0.97931], [0.05045, 0.88298, 0.80235, 0.84074, 0.97977], [0.05259, 0.87201, 0.80261, 0.83587, 0.97902], [0.0501, 0.85863, 0.83463, 0.84646, 0.97985], [0.05221, 0.89471, 0.77318, 0.82952, 0.97885]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "STARE", "data_dir": "datasets/STARE/stare-images", "label_dir": "datasets/STARE/labels-ah", "label_getter": "<function <lambda> at 0x7f39fc034320>", "split_dir": "net_logs/STARE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}