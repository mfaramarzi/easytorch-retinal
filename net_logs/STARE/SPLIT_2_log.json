{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/STARE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_2", "checkpoint": "SPLIT_2.pt", "best_epoch": 27, "best_score": 0.85941, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.31559, 0.37282, 0.61303, 0.46366, 0.88648], [0.14749, 0.74764, 0.60888, 0.67116, 0.95224], [0.12617, 0.77901, 0.65063, 0.70906, 0.95726], [0.10985, 0.79852, 0.69115, 0.74097, 0.96132], [0.10079, 0.81221, 0.7071, 0.75602, 0.96347], [0.09402, 0.81912, 0.72923, 0.77157, 0.96544], [0.08882, 0.82304, 0.741, 0.77987, 0.96652], [0.08343, 0.83284, 0.75776, 0.79353, 0.96844], [0.08248, 0.83129, 0.76135, 0.79478, 0.96853], [0.08204, 0.83228, 0.76198, 0.79558, 0.96866], [0.07599, 0.84011, 0.78077, 0.80935, 0.97056], [0.0738, 0.84487, 0.78338, 0.81296, 0.97115], [0.07208, 0.85102, 0.78277, 0.81547, 0.97164], [0.06996, 0.84935, 0.79447, 0.82099, 0.97227], [0.06841, 0.85535, 0.7927, 0.82283, 0.97268], [0.06979, 0.84928, 0.79408, 0.82075, 0.97224], [0.07129, 0.84936, 0.78534, 0.8161, 0.97167], [0.06637, 0.85478, 0.80426, 0.82875, 0.9734], [0.06471, 0.86346, 0.79961, 0.83031, 0.97384], [0.06426, 0.85896, 0.80738, 0.83237, 0.97397], [0.06214, 0.86333, 0.81232, 0.83705, 0.97468], [0.06295, 0.86118, 0.81068, 0.83517, 0.97439], [0.06218, 0.86395, 0.80916, 0.83566, 0.97453], [0.0632, 0.86119, 0.8083, 0.83391, 0.97423], [0.06176, 0.86429, 0.81054, 0.83655, 0.97465], [0.06215, 0.86064, 0.81337, 0.83634, 0.97452], [0.05958, 0.86781, 0.81799, 0.84216, 0.97546], [0.05844, 0.87046, 0.82077, 0.84489, 0.97588], [0.05862, 0.86796, 0.82157, 0.84413, 0.97571], [0.05775, 0.87003, 0.82327, 0.846, 0.97601], [0.05748, 0.86965, 0.82574, 0.84713, 0.97614]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.17971, 0.928, 0.28404, 0.43495, 0.94249], [0.14405, 0.66639, 0.7348, 0.69893, 0.95066], [0.13795, 0.62259, 0.81903, 0.70743, 0.9472], [0.12564, 0.64102, 0.84714, 0.72981, 0.95112], [0.09191, 0.79994, 0.77098, 0.78519, 0.96713], [0.0825, 0.85366, 0.75951, 0.80384, 0.97111], [0.0803, 0.82723, 0.78782, 0.80704, 0.97064], [0.07579, 0.81728, 0.82012, 0.8187, 0.97169], [0.09328, 0.70029, 0.87565, 0.77821, 0.9611], [0.07619, 0.78453, 0.8454, 0.81383, 0.96986], [0.06762, 0.85053, 0.81808, 0.83399, 0.97462], [0.06942, 0.83009, 0.82157, 0.82581, 0.97299], [0.06442, 0.85698, 0.81577, 0.83587, 0.97503], [0.06556, 0.91704, 0.75077, 0.82562, 0.97528], [0.05773, 0.88254, 0.82002, 0.85013, 0.97747], [0.10049, 0.68023, 0.85806, 0.75887, 0.9575], [0.06234, 0.89354, 0.78969, 0.83841, 0.97628], [0.06135, 0.8844, 0.79863, 0.83933, 0.97617], [0.06011, 0.86319, 0.8318, 0.8472, 0.97662], [0.06027, 0.82682, 0.8749, 0.85018, 0.97597], [0.05773, 0.92437, 0.77395, 0.8425, 0.97745], [0.0591, 0.85588, 0.84354, 0.84967, 0.97674], [0.06069, 0.94181, 0.73498, 0.82564, 0.97581], [0.05835, 0.91841, 0.78514, 0.84656, 0.97782], [0.06031, 0.83005, 0.86268, 0.84605, 0.97553], [0.06032, 0.94115, 0.74088, 0.82909, 0.9762], [0.05475, 0.86636, 0.85257, 0.85941, 0.97826], [0.05307, 0.91826, 0.7993, 0.85466, 0.97881], [0.05626, 0.86255, 0.84188, 0.85209, 0.97722], [0.05423, 0.88062, 0.83371, 0.85652, 0.97823], [0.05523, 0.90399, 0.79988, 0.84875, 0.97778]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "STARE", "data_dir": "datasets/STARE/stare-images", "label_dir": "datasets/STARE/labels-ah", "label_getter": "<function <lambda> at 0x7f39fc034320>", "split_dir": "net_logs/STARE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}