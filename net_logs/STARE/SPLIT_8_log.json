{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/STARE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.91544, 0.70187, 0.79455, 0.9673]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_8", "checkpoint": "SPLIT_8.pt", "best_epoch": 29, "best_score": 0.84641, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.33289, 0.36606, 0.60232, 0.45537, 0.88474], [0.14599, 0.76137, 0.60382, 0.6735, 0.95317], [0.1209, 0.792, 0.65955, 0.71973, 0.95891], [0.10526, 0.81142, 0.7007, 0.75201, 0.96303], [0.09637, 0.81348, 0.73391, 0.77165, 0.96525], [0.08644, 0.82675, 0.75449, 0.78897, 0.96771], [0.08156, 0.8417, 0.75776, 0.79753, 0.96922], [0.08089, 0.82516, 0.77479, 0.79918, 0.96885], [0.07767, 0.83586, 0.77528, 0.80443, 0.96984], [0.07432, 0.84367, 0.77977, 0.81046, 0.97082], [0.07119, 0.84284, 0.7953, 0.81838, 0.97176], [0.07257, 0.84528, 0.7821, 0.81246, 0.97112], [0.06914, 0.84788, 0.79561, 0.82091, 0.97223], [0.06809, 0.84905, 0.7987, 0.82311, 0.97254], [0.0661, 0.85458, 0.80148, 0.82718, 0.97321], [0.06513, 0.85251, 0.80847, 0.82991, 0.97349], [0.06383, 0.85733, 0.80995, 0.83297, 0.97401], [0.06363, 0.86197, 0.80318, 0.83154, 0.97396], [0.06224, 0.85895, 0.81302, 0.83535, 0.97436], [0.06291, 0.85639, 0.81316, 0.83422, 0.97414], [0.06263, 0.86226, 0.80731, 0.83388, 0.97427], [0.06076, 0.86083, 0.81699, 0.83834, 0.97479], [0.06241, 0.86199, 0.80577, 0.83293, 0.97414], [0.06194, 0.85517, 0.81528, 0.83475, 0.97418], [0.05983, 0.86645, 0.8139, 0.83935, 0.97508], [0.05944, 0.86154, 0.82224, 0.84143, 0.97521], [0.06115, 0.86527, 0.80694, 0.83509, 0.9745], [0.05889, 0.86321, 0.82134, 0.84175, 0.9753], [0.05844, 0.86131, 0.82975, 0.84524, 0.97569], [0.05695, 0.87129, 0.82359, 0.84677, 0.97615], [0.056, 0.86824, 0.83095, 0.84919, 0.97639]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.18853, 0.73379, 0.39635, 0.51469, 0.93892], [0.12743, 0.88166, 0.53146, 0.66317, 0.95588], [0.10052, 0.82453, 0.75746, 0.78957, 0.967], [0.09424, 0.89058, 0.6655, 0.76176, 0.96598], [0.08364, 0.83645, 0.77898, 0.80669, 0.96949], [0.12604, 0.96225, 0.43297, 0.59722, 0.95227], [0.07523, 0.84546, 0.80846, 0.82655, 0.97227], [0.0804, 0.92938, 0.68147, 0.78635, 0.96974], [0.06968, 0.87031, 0.80007, 0.83371, 0.97392], [0.07188, 0.88957, 0.74923, 0.81339, 0.9719], [0.07271, 0.85151, 0.79169, 0.82051, 0.97169], [0.06662, 0.85301, 0.81862, 0.83546, 0.97365], [0.06784, 0.88525, 0.76968, 0.82343, 0.97302], [0.06638, 0.8552, 0.81539, 0.83482, 0.97363], [0.06236, 0.85932, 0.8271, 0.8429, 0.9748], [0.06311, 0.90665, 0.76567, 0.83022, 0.97441], [0.06422, 0.85441, 0.8311, 0.84259, 0.97462], [0.06291, 0.8572, 0.82604, 0.84133, 0.97454], [0.06422, 0.87644, 0.79527, 0.83388, 0.97411], [0.06694, 0.82227, 0.85489, 0.83826, 0.97304], [0.06075, 0.88361, 0.80302, 0.84139, 0.97526], [0.06488, 0.88282, 0.7823, 0.82953, 0.97372], [0.06988, 0.83502, 0.8117, 0.82319, 0.9715], [0.06181, 0.86979, 0.81493, 0.84147, 0.97491], [0.06208, 0.87829, 0.79876, 0.83664, 0.97451], [0.06306, 0.89153, 0.78106, 0.83265, 0.97434], [0.07172, 0.77473, 0.88498, 0.82619, 0.96957], [0.0639, 0.8359, 0.84903, 0.84241, 0.97404], [0.05916, 0.87363, 0.82083, 0.84641, 0.97565], [0.06413, 0.88484, 0.79168, 0.83567, 0.97455], [0.06479, 0.81418, 0.8602, 0.83656, 0.97253]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "STARE", "data_dir": "datasets/STARE/stare-images", "label_dir": "datasets/STARE/labels-ah", "label_getter": "<function <lambda> at 0x7f39fc034320>", "split_dir": "net_logs/STARE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}