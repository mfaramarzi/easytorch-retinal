{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/STARE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.91544, 0.70187, 0.79455, 0.9673], ["SPLIT_8.json", 0.8475, 0.90236, 0.87407, 0.97747], ["SPLIT_7.json", 0.89491, 0.6675, 0.76466, 0.96786], ["SPLIT_6.json", 0.82523, 0.75633, 0.78928, 0.95691], ["SPLIT_9.json", 0.9019, 0.76676, 0.82886, 0.97412]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_4", "checkpoint": "SPLIT_4.pt", "best_epoch": 28, "best_score": 0.81835, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.3178, 0.4102, 0.63392, 0.49809, 0.89278], [0.14062, 0.79226, 0.63648, 0.70588, 0.95548], [0.12434, 0.80279, 0.66881, 0.7297, 0.95841], [0.10577, 0.81865, 0.7149, 0.76327, 0.96278], [0.09416, 0.8297, 0.74435, 0.78471, 0.96572], [0.08958, 0.83353, 0.75518, 0.79242, 0.96679], [0.08424, 0.84032, 0.76709, 0.80204, 0.96822], [0.07917, 0.84246, 0.78279, 0.81153, 0.96948], [0.07808, 0.84358, 0.78484, 0.81315, 0.96973], [0.07635, 0.84945, 0.78488, 0.81589, 0.97027], [0.07507, 0.84565, 0.79225, 0.81808, 0.97043], [0.07146, 0.85561, 0.79612, 0.82479, 0.97161], [0.06937, 0.85755, 0.80192, 0.8288, 0.9722], [0.0683, 0.8588, 0.80633, 0.83174, 0.97262], [0.06766, 0.85959, 0.80731, 0.83263, 0.97276], [0.067, 0.85947, 0.80933, 0.83365, 0.97289], [0.06544, 0.8606, 0.81427, 0.83679, 0.97334], [0.06592, 0.86257, 0.80941, 0.83514, 0.97318], [0.06383, 0.86835, 0.8107, 0.83854, 0.9738], [0.06324, 0.86426, 0.81703, 0.83998, 0.97387], [0.06324, 0.86582, 0.81606, 0.8402, 0.97395], [0.06393, 0.86386, 0.81594, 0.83922, 0.97376], [0.06181, 0.86948, 0.81808, 0.843, 0.97442], [0.06272, 0.86694, 0.81735, 0.84141, 0.97414], [0.06123, 0.86984, 0.82039, 0.84439, 0.97462], [0.06147, 0.86857, 0.82091, 0.84407, 0.97454], [0.0598, 0.87152, 0.8251, 0.84767, 0.97511], [0.05985, 0.87233, 0.82355, 0.84724, 0.97507], [0.05936, 0.86612, 0.83234, 0.84889, 0.97513], [0.05839, 0.87611, 0.8254, 0.85, 0.97555], [0.05699, 0.87542, 0.83425, 0.85434, 0.97612]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.15311, 0.80288, 0.33044, 0.46819, 0.95357], [0.11194, 0.78297, 0.54911, 0.64551, 0.9627], [0.12706, 0.59788, 0.73533, 0.65952, 0.95305], [0.09976, 0.67127, 0.77145, 0.71788, 0.9625], [0.08464, 0.73858, 0.74943, 0.74397, 0.9681], [0.08001, 0.77889, 0.72196, 0.74935, 0.97013], [0.07059, 0.86575, 0.69371, 0.77024, 0.97441], [0.07755, 0.72846, 0.82387, 0.77323, 0.97012], [0.07518, 0.73787, 0.83891, 0.78515, 0.97161], [0.07336, 0.72143, 0.85121, 0.78097, 0.97047], [0.07573, 0.7139, 0.85378, 0.7776, 0.9698], [0.06671, 0.78895, 0.80601, 0.79739, 0.97467], [0.06343, 0.81118, 0.77288, 0.79157, 0.97483], [0.06439, 0.79401, 0.79278, 0.79339, 0.97447], [0.0606, 0.78971, 0.82921, 0.80898, 0.97578], [0.05882, 0.85619, 0.76197, 0.80634, 0.97736], [0.06314, 0.81277, 0.76795, 0.78972, 0.97471], [0.06364, 0.78132, 0.80604, 0.79349, 0.97405], [0.05963, 0.84997, 0.75654, 0.80054, 0.97669], [0.05807, 0.79369, 0.8362, 0.81439, 0.97643], [0.06041, 0.78787, 0.8211, 0.80414, 0.97526], [0.06272, 0.77986, 0.82985, 0.80408, 0.97499], [0.06263, 0.79677, 0.79509, 0.79593, 0.97479], [0.06337, 0.79704, 0.79833, 0.79768, 0.97496], [0.06134, 0.76719, 0.85452, 0.8085, 0.97497], [0.0571, 0.8321, 0.79138, 0.81123, 0.97722], [0.08554, 0.6425, 0.90893, 0.75284, 0.96309], [0.05791, 0.78708, 0.8522, 0.81835, 0.9766], [0.05825, 0.8246, 0.79177, 0.80785, 0.97671], [0.05752, 0.8031, 0.81153, 0.80729, 0.97604], [0.06131, 0.76587, 0.84738, 0.80457, 0.97454]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "STARE", "data_dir": "datasets/STARE/stare-images", "label_dir": "datasets/STARE/labels-ah", "label_getter": "<function <lambda> at 0x7f39fc034320>", "split_dir": "net_logs/STARE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}