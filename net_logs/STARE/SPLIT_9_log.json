{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/STARE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.91544, 0.70187, 0.79455, 0.9673], ["SPLIT_8.json", 0.8475, 0.90236, 0.87407, 0.97747], ["SPLIT_7.json", 0.89491, 0.6675, 0.76466, 0.96786], ["SPLIT_6.json", 0.82523, 0.75633, 0.78928, 0.95691]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_9", "checkpoint": "SPLIT_9.pt", "best_epoch": 21, "best_score": 0.86267, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.3329, 0.38797, 0.58206, 0.4656, 0.89259], [0.1421, 0.78532, 0.61222, 0.68805, 0.95537], [0.11608, 0.80617, 0.68247, 0.73918, 0.96128], [0.10636, 0.81742, 0.69719, 0.75253, 0.96314], [0.09769, 0.81466, 0.73034, 0.7702, 0.96496], [0.08925, 0.8287, 0.74363, 0.78386, 0.96703], [0.08248, 0.84023, 0.75954, 0.79785, 0.96906], [0.07822, 0.83622, 0.78007, 0.80717, 0.97004], [0.07465, 0.84876, 0.77904, 0.81241, 0.97108], [0.07269, 0.84666, 0.78923, 0.81694, 0.97156], [0.07102, 0.8481, 0.79261, 0.81942, 0.97192], [0.06767, 0.85504, 0.80122, 0.82726, 0.9731], [0.06737, 0.85522, 0.79907, 0.82619, 0.97297], [0.06756, 0.85294, 0.79853, 0.82484, 0.97274], [0.06481, 0.86114, 0.80485, 0.83204, 0.97388], [0.06487, 0.8562, 0.80671, 0.83072, 0.97357], [0.06373, 0.862, 0.8043, 0.83215, 0.97392], [0.06432, 0.86167, 0.802, 0.83076, 0.97373], [0.0622, 0.85943, 0.81669, 0.83752, 0.97452], [0.0614, 0.85935, 0.81773, 0.83802, 0.97459], [0.06005, 0.86756, 0.81708, 0.84156, 0.97527], [0.06017, 0.86521, 0.81782, 0.84085, 0.97511], [0.05858, 0.86544, 0.82576, 0.84513, 0.97567], [0.05897, 0.86902, 0.81814, 0.84281, 0.97547], [0.05931, 0.86365, 0.82132, 0.84195, 0.97521], [0.05724, 0.86736, 0.8288, 0.84764, 0.97605], [0.0582, 0.86562, 0.82659, 0.84565, 0.97574], [0.05717, 0.86916, 0.8272, 0.84766, 0.9761], [0.05475, 0.87209, 0.8348, 0.85304, 0.97688], [0.05713, 0.86696, 0.82914, 0.84763, 0.97604], [0.05674, 0.872, 0.82542, 0.84807, 0.97622]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.1575, 0.85073, 0.47871, 0.61267, 0.94944], [0.11487, 0.76421, 0.77771, 0.7709, 0.96139], [0.14608, 0.69813, 0.88174, 0.77927, 0.95827], [0.18929, 0.95069, 0.17674, 0.29807, 0.93047], [0.08568, 0.84365, 0.7599, 0.79959, 0.96818], [0.0872, 0.76749, 0.87157, 0.81623, 0.96722], [0.08413, 0.74162, 0.92174, 0.82193, 0.96664], [0.07782, 0.76908, 0.89213, 0.82605, 0.96861], [0.07275, 0.78558, 0.88491, 0.83229, 0.97021], [0.06598, 0.81612, 0.86695, 0.84077, 0.97257], [0.06734, 0.82818, 0.84876, 0.83834, 0.97266], [0.06121, 0.88875, 0.80747, 0.84616, 0.97548], [0.0645, 0.87216, 0.79796, 0.83341, 0.97335], [0.07425, 0.7723, 0.90587, 0.83377, 0.96983], [0.06129, 0.84143, 0.86427, 0.8527, 0.97506], [0.05888, 0.85868, 0.85107, 0.85486, 0.97586], [0.06622, 0.82336, 0.86947, 0.84579, 0.97352], [0.06516, 0.83999, 0.83231, 0.83613, 0.97275], [0.07013, 0.77565, 0.91587, 0.83995, 0.97084], [0.06264, 0.81904, 0.88659, 0.85148, 0.97416], [0.05376, 0.87606, 0.84969, 0.86267, 0.9774], [0.0552, 0.88373, 0.83277, 0.85749, 0.97688], [0.05742, 0.85682, 0.85723, 0.85702, 0.97611], [0.06393, 0.81492, 0.88669, 0.84929, 0.97371], [0.05924, 0.82223, 0.89562, 0.85736, 0.97511], [0.06274, 0.8223, 0.88674, 0.85331, 0.97453], [0.05759, 0.84785, 0.86818, 0.85789, 0.97597], [0.05481, 0.87113, 0.8502, 0.86054, 0.97698], [0.06076, 0.81061, 0.90856, 0.85679, 0.97463], [0.05803, 0.85767, 0.84578, 0.85168, 0.97539], [0.06332, 0.80236, 0.90365, 0.85, 0.97336]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "STARE", "data_dir": "datasets/STARE/stare-images", "label_dir": "datasets/STARE/labels-ah", "label_getter": "<function <lambda> at 0x7f39fc034320>", "split_dir": "net_logs/STARE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}