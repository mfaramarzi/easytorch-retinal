{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/STARE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.91544, 0.70187, 0.79455, 0.9673], ["SPLIT_8.json", 0.8475, 0.90236, 0.87407, 0.97747], ["SPLIT_7.json", 0.89491, 0.6675, 0.76466, 0.96786]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_6", "checkpoint": "SPLIT_6.pt", "best_epoch": 20, "best_score": 0.80238, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.3189, 0.39811, 0.64728, 0.493, 0.89625], [0.13272, 0.79126, 0.64092, 0.7082, 0.95884], [0.11123, 0.80741, 0.68951, 0.74382, 0.96299], [0.09811, 0.82359, 0.72158, 0.76922, 0.96626], [0.08429, 0.8351, 0.76792, 0.8001, 0.9701], [0.07986, 0.83924, 0.77054, 0.80342, 0.97061], [0.07892, 0.84513, 0.76706, 0.8042, 0.97089], [0.07148, 0.84759, 0.79478, 0.82034, 0.97287], [0.06843, 0.84965, 0.80154, 0.82489, 0.97348], [0.06867, 0.8536, 0.79528, 0.82341, 0.97342], [0.06826, 0.85046, 0.7981, 0.82345, 0.97333], [0.06382, 0.85949, 0.8058, 0.83178, 0.9746], [0.06293, 0.85672, 0.81101, 0.83324, 0.9747], [0.06166, 0.85662, 0.81954, 0.83767, 0.97525], [0.05942, 0.8632, 0.8221, 0.84215, 0.97598], [0.06012, 0.86245, 0.81778, 0.83952, 0.97564], [0.0587, 0.8633, 0.823, 0.84267, 0.97605], [0.05757, 0.86682, 0.8231, 0.84439, 0.97636], [0.05663, 0.86997, 0.82398, 0.84635, 0.97669], [0.05554, 0.86797, 0.83238, 0.8498, 0.97707], [0.05541, 0.87153, 0.82772, 0.84906, 0.97707], [0.05587, 0.86755, 0.8287, 0.84768, 0.97679], [0.0558, 0.87152, 0.82508, 0.84766, 0.97689], [0.05558, 0.86413, 0.83446, 0.84904, 0.97687], [0.05437, 0.87305, 0.82983, 0.85089, 0.97733], [0.05431, 0.86931, 0.83461, 0.85161, 0.97733], [0.05357, 0.8746, 0.83101, 0.85225, 0.97755], [0.05401, 0.87115, 0.83354, 0.85193, 0.97742], [0.05281, 0.86984, 0.84245, 0.85593, 0.9779], [0.05178, 0.87793, 0.83603, 0.85647, 0.97816], [0.05336, 0.86885, 0.83906, 0.8537, 0.97759]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.22616, 0.66592, 0.20161, 0.30951, 0.92963], [0.17988, 0.83989, 0.29974, 0.44181, 0.94075], [0.1576, 0.77243, 0.45879, 0.57566, 0.94709], [0.13719, 0.8592, 0.48639, 0.62115, 0.95358], [0.12034, 0.86304, 0.53391, 0.6597, 0.95691], [0.15041, 0.93134, 0.40142, 0.56103, 0.95086], [0.11309, 0.87285, 0.57683, 0.69462, 0.96032], [0.09975, 0.85562, 0.64271, 0.73404, 0.96357], [0.09236, 0.89391, 0.65236, 0.75427, 0.96675], [0.12708, 0.90508, 0.53446, 0.67206, 0.9592], [0.09849, 0.90046, 0.61465, 0.7306, 0.96454], [0.09252, 0.87814, 0.65343, 0.7493, 0.96579], [0.09759, 0.86772, 0.6304, 0.73026, 0.96357], [0.1085, 0.84655, 0.64368, 0.73131, 0.963], [0.11263, 0.90722, 0.57962, 0.70733, 0.96248], [0.09228, 0.86499, 0.67145, 0.75603, 0.9661], [0.09194, 0.89484, 0.62277, 0.73442, 0.96476], [0.08577, 0.86254, 0.68722, 0.76496, 0.96696], [0.1015, 0.88588, 0.6188, 0.72864, 0.96394], [0.07641, 0.81754, 0.78778, 0.80238, 0.96964], [0.09073, 0.89659, 0.65349, 0.75598, 0.967], [0.09394, 0.86374, 0.67632, 0.75863, 0.96633], [0.08877, 0.86269, 0.68577, 0.76412, 0.96688], [0.09812, 0.85718, 0.67988, 0.7583, 0.9661], [0.07577, 0.83145, 0.77128, 0.80024, 0.96988], [0.08306, 0.84778, 0.73096, 0.78505, 0.96869], [0.08721, 0.82574, 0.75178, 0.78703, 0.96817], [0.08671, 0.83913, 0.72304, 0.77677, 0.96749], [0.08939, 0.88105, 0.6753, 0.76457, 0.96747], [0.08468, 0.85947, 0.72426, 0.78609, 0.96917], [0.1302, 0.67562, 0.75052, 0.7111, 0.95229]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "STARE", "data_dir": "datasets/STARE/stare-images", "label_dir": "datasets/STARE/labels-ah", "label_getter": "<function <lambda> at 0x7f39fc034320>", "split_dir": "net_logs/STARE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}