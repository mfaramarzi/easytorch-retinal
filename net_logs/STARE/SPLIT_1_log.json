{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/STARE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.91544, 0.70187, 0.79455, 0.9673], ["SPLIT_8.json", 0.8475, 0.90236, 0.87407, 0.97747], ["SPLIT_7.json", 0.89491, 0.6675, 0.76466, 0.96786], ["SPLIT_6.json", 0.82523, 0.75633, 0.78928, 0.95691], ["SPLIT_9.json", 0.9019, 0.76676, 0.82886, 0.97412], ["SPLIT_4.json", 0.83383, 0.83218, 0.833, 0.97494], ["SPLIT_5.json", 0.77856, 0.82766, 0.80236, 0.97478], ["SPLIT_0.json", 0.81089, 0.89488, 0.85082, 0.97379]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_1", "checkpoint": "SPLIT_1.pt", "best_epoch": 25, "best_score": 0.81132, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.32341, 0.37362, 0.61503, 0.46485, 0.88464], [0.14788, 0.76327, 0.61094, 0.67866, 0.95287], [0.12722, 0.78328, 0.64747, 0.70893, 0.95669], [0.11323, 0.79984, 0.68889, 0.74023, 0.96061], [0.10248, 0.81565, 0.7116, 0.76008, 0.9634], [0.09456, 0.82467, 0.72926, 0.77404, 0.96531], [0.08577, 0.8347, 0.75347, 0.79201, 0.96776], [0.08006, 0.84377, 0.76551, 0.80274, 0.96935], [0.07879, 0.84075, 0.77555, 0.80683, 0.96975], [0.08215, 0.83608, 0.76208, 0.79737, 0.96845], [0.07654, 0.84213, 0.78042, 0.8101, 0.97019], [0.07157, 0.84908, 0.79432, 0.82079, 0.97174], [0.07275, 0.85347, 0.78185, 0.81609, 0.97129], [0.06972, 0.85304, 0.79571, 0.82338, 0.97219], [0.06792, 0.85993, 0.79447, 0.8259, 0.97271], [0.0681, 0.85119, 0.80468, 0.82728, 0.97263], [0.06767, 0.85537, 0.80021, 0.82687, 0.9727], [0.06605, 0.86011, 0.80357, 0.83088, 0.97335], [0.06509, 0.86654, 0.79845, 0.8311, 0.97356], [0.06443, 0.86258, 0.80697, 0.83385, 0.9738], [0.0625, 0.8629, 0.81537, 0.83846, 0.97441], [0.06212, 0.86477, 0.81464, 0.83896, 0.97452], [0.06284, 0.86699, 0.80605, 0.83541, 0.97413], [0.06243, 0.8616, 0.81555, 0.83794, 0.9743], [0.0606, 0.87027, 0.81402, 0.84121, 0.97496], [0.06334, 0.85912, 0.814, 0.83595, 0.97397], [0.06127, 0.86886, 0.81291, 0.83995, 0.97476], [0.05953, 0.87033, 0.82016, 0.8445, 0.97539], [0.05898, 0.86928, 0.82218, 0.84507, 0.97544], [0.05723, 0.8721, 0.82877, 0.84988, 0.97615], [0.05773, 0.87327, 0.82405, 0.84795, 0.97592]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.21393, 0.90564, 0.25483, 0.39774, 0.93047], [0.15003, 0.91092, 0.47804, 0.62702, 0.94876], [0.13328, 0.90074, 0.54535, 0.67937, 0.95362], [0.14724, 0.95766, 0.41118, 0.57533, 0.94531], [0.11228, 0.89196, 0.62416, 0.73441, 0.95933], [0.12173, 0.92745, 0.55032, 0.69076, 0.95561], [0.10063, 0.90665, 0.66208, 0.7653, 0.96341], [0.08887, 0.89057, 0.70348, 0.78605, 0.9655], [0.08635, 0.87157, 0.73936, 0.80004, 0.9667], [0.10764, 0.92952, 0.60925, 0.73606, 0.96063], [0.09321, 0.88139, 0.69995, 0.78026, 0.96448], [0.10136, 0.93132, 0.61881, 0.74356, 0.96154], [0.08783, 0.92054, 0.6709, 0.77614, 0.96513], [0.09195, 0.90992, 0.66686, 0.76966, 0.96404], [0.08642, 0.90009, 0.70227, 0.78897, 0.96615], [0.08846, 0.92678, 0.65805, 0.76963, 0.96451], [0.10528, 0.9381, 0.56526, 0.70545, 0.95747], [0.10195, 0.93889, 0.59365, 0.72738, 0.95991], [0.10068, 0.9156, 0.64255, 0.75515, 0.96246], [0.08506, 0.91873, 0.69281, 0.78993, 0.9668], [0.08791, 0.92576, 0.65864, 0.76968, 0.96449], [0.08905, 0.93196, 0.65299, 0.76792, 0.96444], [0.10269, 0.94362, 0.57572, 0.71513, 0.95867], [0.08151, 0.9199, 0.68349, 0.78427, 0.96612], [0.07756, 0.89002, 0.74541, 0.81132, 0.96876], [0.09895, 0.87292, 0.66088, 0.75224, 0.96078], [0.08157, 0.91914, 0.6994, 0.79435, 0.96737], [0.08799, 0.92323, 0.6714, 0.77743, 0.96536], [0.09528, 0.94248, 0.62077, 0.74852, 0.96242], [0.08578, 0.93037, 0.65414, 0.76818, 0.96443], [0.0874, 0.9176, 0.66315, 0.7699, 0.96428]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "STARE", "data_dir": "datasets/STARE/stare-images", "label_dir": "datasets/STARE/labels-ah", "label_getter": "<function <lambda> at 0x7f39fc034320>", "split_dir": "net_logs/STARE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}