{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/STARE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.91544, 0.70187, 0.79455, 0.9673], ["SPLIT_8.json", 0.8475, 0.90236, 0.87407, 0.97747], ["SPLIT_7.json", 0.89491, 0.6675, 0.76466, 0.96786], ["SPLIT_6.json", 0.82523, 0.75633, 0.78928, 0.95691], ["SPLIT_9.json", 0.9019, 0.76676, 0.82886, 0.97412], ["SPLIT_4.json", 0.83383, 0.83218, 0.833, 0.97494]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_5", "checkpoint": "SPLIT_5.pt", "best_epoch": 24, "best_score": 0.80058, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.31764, 0.39678, 0.6323, 0.48759, 0.89371], [0.14157, 0.77777, 0.62844, 0.69518, 0.95592], [0.11663, 0.80807, 0.68041, 0.73877, 0.96151], [0.09956, 0.82471, 0.72538, 0.77186, 0.96571], [0.0875, 0.83215, 0.76339, 0.79629, 0.96876], [0.08383, 0.83666, 0.76241, 0.79781, 0.96909], [0.08217, 0.83703, 0.76542, 0.79962, 0.96932], [0.07419, 0.846, 0.79043, 0.81727, 0.97173], [0.07171, 0.8483, 0.79469, 0.82062, 0.97221], [0.07062, 0.85204, 0.7932, 0.82157, 0.97244], [0.07023, 0.84643, 0.80129, 0.82324, 0.97248], [0.06551, 0.85762, 0.80776, 0.83194, 0.9739], [0.06512, 0.85568, 0.80908, 0.83173, 0.97382], [0.06249, 0.85989, 0.8195, 0.83921, 0.97488], [0.06198, 0.86048, 0.81953, 0.83951, 0.97494], [0.06101, 0.86463, 0.81877, 0.84108, 0.97525], [0.06027, 0.86205, 0.82406, 0.84263, 0.97538], [0.06165, 0.86349, 0.81431, 0.83818, 0.97485], [0.0593, 0.8669, 0.82118, 0.84342, 0.97561], [0.05856, 0.86666, 0.82543, 0.84554, 0.97588], [0.05752, 0.8692, 0.82795, 0.84807, 0.97628], [0.05789, 0.86849, 0.82664, 0.84705, 0.97612], [0.05724, 0.87163, 0.82496, 0.84765, 0.97628], [0.0578, 0.86454, 0.83084, 0.84736, 0.97606], [0.05591, 0.87253, 0.82971, 0.85058, 0.97669], [0.05716, 0.86803, 0.82896, 0.84805, 0.97624], [0.05563, 0.87038, 0.834, 0.8518, 0.97679], [0.05449, 0.87331, 0.83652, 0.85452, 0.97722], [0.0556, 0.8678, 0.83726, 0.85226, 0.97678], [0.05607, 0.87374, 0.82642, 0.84942, 0.97657], [0.05356, 0.87324, 0.84145, 0.85705, 0.97755]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.21656, 0.87138, 0.33116, 0.47993, 0.92342], [0.23221, 0.66186, 0.55731, 0.6051, 0.92238], [0.16728, 0.79156, 0.58862, 0.67517, 0.93956], [0.15281, 0.80469, 0.61345, 0.69618, 0.94287], [0.14587, 0.75368, 0.71714, 0.73496, 0.94481], [0.14, 0.87451, 0.58365, 0.70007, 0.94664], [0.1685, 0.67259, 0.799, 0.73037, 0.93705], [0.13054, 0.8076, 0.69276, 0.74578, 0.94961], [0.12484, 0.85324, 0.64896, 0.73721, 0.95063], [0.12647, 0.77277, 0.75841, 0.76552, 0.95043], [0.12522, 0.84519, 0.67399, 0.74994, 0.95204], [0.12284, 0.82799, 0.68689, 0.75087, 0.95136], [0.12482, 0.90299, 0.60867, 0.72718, 0.95127], [0.12443, 0.77617, 0.75727, 0.7666, 0.9508], [0.12235, 0.88224, 0.64896, 0.74783, 0.9533], [0.10867, 0.88613, 0.69171, 0.77694, 0.95762], [0.12504, 0.81712, 0.69303, 0.74998, 0.95069], [0.10994, 0.87321, 0.69564, 0.77438, 0.95675], [0.10507, 0.90965, 0.68139, 0.77915, 0.95878], [0.10403, 0.86239, 0.72965, 0.79049, 0.95873], [0.11859, 0.92108, 0.63976, 0.75507, 0.95571], [0.11193, 0.916, 0.66584, 0.77114, 0.95783], [0.1072, 0.91457, 0.68352, 0.78234, 0.95942], [0.0969, 0.89804, 0.7222, 0.80058, 0.96161], [0.10194, 0.91413, 0.70097, 0.79348, 0.96107], [0.10819, 0.85152, 0.72818, 0.78503, 0.95745], [0.10189, 0.84665, 0.75914, 0.80051, 0.95963], [0.1085, 0.91007, 0.69451, 0.78781, 0.96008], [0.1418, 0.81601, 0.65559, 0.72706, 0.94748], [0.09847, 0.88177, 0.73152, 0.79965, 0.96089], [0.11663, 0.88354, 0.69493, 0.77797, 0.95767]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "STARE", "data_dir": "datasets/STARE/stare-images", "label_dir": "datasets/STARE/labels-ah", "label_getter": "<function <lambda> at 0x7f39fc034320>", "split_dir": "net_logs/STARE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}