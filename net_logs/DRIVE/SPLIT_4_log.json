{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/DRIVE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.8481, 0.80524, 0.82611, 0.96693], ["SPLIT_8.json", 0.83081, 0.76595, 0.79706, 0.96111], ["SPLIT_7.json", 0.79472, 0.81938, 0.80686, 0.96407], ["SPLIT_6.json", 0.8464, 0.7572, 0.79932, 0.96361], ["SPLIT_9.json", 0.82199, 0.80759, 0.81473, 0.96407]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_4", "checkpoint": "SPLIT_4.pt", "best_epoch": 26, "best_score": 0.8087, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.30929, 0.46153, 0.72927, 0.5653, 0.89123], [0.15071, 0.79863, 0.68997, 0.74033, 0.95306], [0.13311, 0.80956, 0.69471, 0.74775, 0.95454], [0.12563, 0.81127, 0.70736, 0.75576, 0.95566], [0.11985, 0.824, 0.70615, 0.76054, 0.95687], [0.1121, 0.83075, 0.72484, 0.77419, 0.95899], [0.10862, 0.83242, 0.73057, 0.77818, 0.95961], [0.10662, 0.84167, 0.72461, 0.77877, 0.96007], [0.10346, 0.8385, 0.73947, 0.78588, 0.96092], [0.10255, 0.84208, 0.73646, 0.78574, 0.96105], [0.10003, 0.83844, 0.75156, 0.79263, 0.96186], [0.09905, 0.84615, 0.74416, 0.79188, 0.96207], [0.09769, 0.84715, 0.74885, 0.79497, 0.96254], [0.09718, 0.84493, 0.75133, 0.79539, 0.96251], [0.09757, 0.84669, 0.74881, 0.79475, 0.96249], [0.09648, 0.84977, 0.74659, 0.79485, 0.96262], [0.09461, 0.8461, 0.76002, 0.80075, 0.96332], [0.09734, 0.85026, 0.74725, 0.79543, 0.96273], [0.09604, 0.84255, 0.76075, 0.79956, 0.96301], [0.09485, 0.85234, 0.75114, 0.79855, 0.96325], [0.0944, 0.84867, 0.7559, 0.7996, 0.96326], [0.09299, 0.85261, 0.75651, 0.80169, 0.9637], [0.0921, 0.84942, 0.76434, 0.80464, 0.964], [0.09153, 0.84836, 0.76684, 0.80554, 0.96409], [0.09192, 0.85245, 0.761, 0.80413, 0.96405], [0.09092, 0.85369, 0.76322, 0.80592, 0.96435], [0.09043, 0.85442, 0.76378, 0.80656, 0.96447], [0.09042, 0.85165, 0.76841, 0.80789, 0.96456], [0.08997, 0.85331, 0.76707, 0.8079, 0.96462], [0.08995, 0.85207, 0.76875, 0.80827, 0.96463], [0.08986, 0.85185, 0.76822, 0.80788, 0.96456]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.33306, 0.2992, 0.10967, 0.16051, 0.8848], [0.15039, 0.85248, 0.57555, 0.68716, 0.94738], [0.13308, 0.8191, 0.67389, 0.73943, 0.95231], [0.13327, 0.85947, 0.61098, 0.71423, 0.9509], [0.12336, 0.86473, 0.63794, 0.73422, 0.95362], [0.11484, 0.84258, 0.69685, 0.76282, 0.95648], [0.12347, 0.90306, 0.58841, 0.71254, 0.95233], [0.10771, 0.84434, 0.71388, 0.77365, 0.95805], [0.10412, 0.84279, 0.73068, 0.78274, 0.95927], [0.09997, 0.83438, 0.75748, 0.79407, 0.96055], [0.10436, 0.87056, 0.69576, 0.77341, 0.95906], [0.10138, 0.87002, 0.70474, 0.77871, 0.95978], [0.10323, 0.80894, 0.77872, 0.79354, 0.95931], [0.10332, 0.87642, 0.68825, 0.77102, 0.95895], [0.11223, 0.92239, 0.5993, 0.72655, 0.9547], [0.09692, 0.86239, 0.72789, 0.78945, 0.96101], [0.10023, 0.85818, 0.72584, 0.78648, 0.96043], [0.10289, 0.84508, 0.74226, 0.79034, 0.96046], [0.09852, 0.83085, 0.76789, 0.79813, 0.96099], [0.09922, 0.83709, 0.74924, 0.79073, 0.96018], [0.09894, 0.86176, 0.7225, 0.78601, 0.9605], [0.09849, 0.8687, 0.72083, 0.78789, 0.96103], [0.09453, 0.87004, 0.72374, 0.79018, 0.9614], [0.09508, 0.86119, 0.72915, 0.78969, 0.961], [0.09329, 0.87629, 0.72737, 0.79492, 0.96231], [0.0973, 0.80511, 0.81232, 0.8087, 0.96141], [0.10133, 0.76691, 0.84816, 0.80549, 0.95887], [0.09261, 0.86115, 0.74615, 0.79954, 0.96243], [0.09676, 0.89052, 0.68922, 0.77704, 0.96028], [0.10221, 0.86808, 0.70416, 0.77757, 0.95955], [0.09425, 0.86309, 0.73884, 0.79615, 0.96201]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "DRIVE", "data_dir": "datasets/DRIVE/images", "label_dir": "datasets/DRIVE/manual", "mask_dir": "datasets/DRIVE/mask", "label_getter": "<function <lambda> at 0x7f3b0e03b320>", "mask_getter": "<function <lambda> at 0x7f39fc034290>", "split_dir": "net_logs/DRIVE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}