{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/DRIVE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.8481, 0.80524, 0.82611, 0.96693], ["SPLIT_8.json", 0.83081, 0.76595, 0.79706, 0.96111], ["SPLIT_7.json", 0.79472, 0.81938, 0.80686, 0.96407]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_6", "checkpoint": "SPLIT_6.pt", "best_epoch": 22, "best_score": 0.81209, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.31311, 0.46813, 0.71782, 0.56669, 0.89074], [0.1483, 0.7975, 0.68666, 0.73794, 0.95146], [0.13509, 0.80589, 0.69317, 0.74529, 0.95284], [0.12591, 0.80743, 0.71519, 0.75852, 0.95468], [0.11873, 0.82582, 0.71512, 0.76649, 0.95663], [0.11248, 0.82658, 0.73283, 0.77689, 0.95811], [0.11002, 0.83295, 0.73256, 0.77954, 0.95876], [0.10727, 0.83798, 0.73352, 0.78228, 0.95936], [0.10572, 0.83664, 0.73978, 0.78523, 0.95972], [0.10496, 0.84029, 0.73623, 0.78483, 0.95982], [0.10258, 0.83998, 0.748, 0.79133, 0.96074], [0.10249, 0.844, 0.74067, 0.78897, 0.96056], [0.10068, 0.84526, 0.74583, 0.79244, 0.96111], [0.09877, 0.84576, 0.75201, 0.79613, 0.96167], [0.09849, 0.84489, 0.75342, 0.79654, 0.96169], [0.0982, 0.85066, 0.74632, 0.79508, 0.96171], [0.09789, 0.84326, 0.75776, 0.79823, 0.96187], [0.09722, 0.85103, 0.75069, 0.79772, 0.96211], [0.09575, 0.84895, 0.75784, 0.80081, 0.96248], [0.09657, 0.84974, 0.75294, 0.79842, 0.96216], [0.09743, 0.84508, 0.75485, 0.79742, 0.96183], [0.09538, 0.85073, 0.75683, 0.80104, 0.96258], [0.09366, 0.84928, 0.76554, 0.80524, 0.96314], [0.09519, 0.84416, 0.76291, 0.80148, 0.96239], [0.09481, 0.85306, 0.75487, 0.80097, 0.96266], [0.09368, 0.84951, 0.76416, 0.80458, 0.96305], [0.0924, 0.85543, 0.76191, 0.80597, 0.96349], [0.09228, 0.85146, 0.76785, 0.8075, 0.96356], [0.09198, 0.85023, 0.76919, 0.80768, 0.96354], [0.09088, 0.8527, 0.77156, 0.8101, 0.964], [0.09158, 0.85156, 0.76801, 0.80763, 0.96359]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.25451, 0.82877, 0.16263, 0.2719, 0.92022], [0.12446, 0.83385, 0.67845, 0.74817, 0.95816], [0.11207, 0.81498, 0.73868, 0.77496, 0.9607], [0.10677, 0.83484, 0.73317, 0.78071, 0.96227], [0.10221, 0.86989, 0.69263, 0.77121, 0.96235], [0.09856, 0.82851, 0.76137, 0.79352, 0.9637], [0.09403, 0.85877, 0.72928, 0.78875, 0.96422], [0.09698, 0.80985, 0.77872, 0.79398, 0.96298], [0.0922, 0.85837, 0.73732, 0.79325, 0.96479], [0.0944, 0.83825, 0.7531, 0.7934, 0.96407], [0.09337, 0.84062, 0.75707, 0.79666, 0.9646], [0.0908, 0.83111, 0.77226, 0.8006, 0.96476], [0.08882, 0.83542, 0.77118, 0.80202, 0.96512], [0.09649, 0.77508, 0.8319, 0.80249, 0.96249], [0.08721, 0.86043, 0.74877, 0.80073, 0.96586], [0.09635, 0.78237, 0.82414, 0.80271, 0.96289], [0.08809, 0.80887, 0.81057, 0.80972, 0.9651], [0.08746, 0.85795, 0.74943, 0.80003, 0.96568], [0.08639, 0.84657, 0.76174, 0.80192, 0.96553], [0.10027, 0.76889, 0.83856, 0.80222, 0.96212], [0.08723, 0.87953, 0.71571, 0.78921, 0.96498], [0.08496, 0.82805, 0.79673, 0.81209, 0.96622], [0.08742, 0.80804, 0.81192, 0.80998, 0.9651], [0.10145, 0.75244, 0.84502, 0.79605, 0.96034], [0.08473, 0.85885, 0.75723, 0.80485, 0.96636], [0.08574, 0.83092, 0.78586, 0.80776, 0.96574], [0.09509, 0.7688, 0.84799, 0.80646, 0.96272], [0.08945, 0.78301, 0.84051, 0.81074, 0.96405], [0.08476, 0.84434, 0.76988, 0.80539, 0.96592], [0.08615, 0.82329, 0.79269, 0.8077, 0.96542], [0.0828, 0.85277, 0.76536, 0.8067, 0.9664]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "DRIVE", "data_dir": "datasets/DRIVE/images", "label_dir": "datasets/DRIVE/manual", "mask_dir": "datasets/DRIVE/mask", "label_getter": "<function <lambda> at 0x7f3b0e03b320>", "mask_getter": "<function <lambda> at 0x7f39fc034290>", "split_dir": "net_logs/DRIVE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}