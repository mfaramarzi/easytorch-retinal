{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/DRIVE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.8481, 0.80524, 0.82611, 0.96693]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_8", "checkpoint": "SPLIT_8.pt", "best_epoch": 25, "best_score": 0.81127, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.31609, 0.46145, 0.72914, 0.5652, 0.88978], [0.14781, 0.79578, 0.68802, 0.73799, 0.952], [0.13159, 0.80361, 0.70367, 0.75033, 0.95399], [0.12575, 0.80408, 0.71669, 0.75787, 0.95501], [0.11796, 0.82023, 0.71669, 0.76497, 0.95673], [0.11374, 0.82077, 0.72924, 0.7723, 0.95775], [0.11119, 0.8282, 0.7277, 0.7747, 0.95842], [0.1076, 0.82843, 0.73779, 0.78049, 0.95922], [0.10555, 0.83709, 0.73309, 0.78165, 0.95976], [0.10281, 0.8345, 0.74339, 0.78631, 0.9603], [0.10113, 0.83952, 0.74605, 0.79003, 0.96104], [0.10095, 0.84068, 0.74276, 0.78869, 0.9609], [0.0994, 0.84043, 0.74895, 0.79206, 0.96136], [0.09866, 0.84324, 0.74691, 0.79216, 0.96149], [0.09746, 0.84108, 0.75555, 0.79602, 0.96196], [0.09689, 0.84623, 0.74973, 0.79506, 0.96203], [0.09661, 0.84344, 0.75604, 0.79735, 0.96224], [0.09617, 0.84817, 0.75058, 0.7964, 0.96229], [0.09497, 0.84539, 0.75916, 0.79996, 0.9627], [0.09588, 0.84816, 0.75128, 0.79679, 0.96235], [0.09474, 0.84651, 0.7566, 0.79903, 0.96261], [0.09393, 0.84813, 0.75731, 0.80015, 0.96283], [0.09217, 0.84741, 0.76703, 0.80522, 0.96354], [0.09299, 0.84949, 0.75909, 0.80175, 0.96312], [0.09177, 0.85192, 0.76265, 0.80482, 0.96366], [0.09073, 0.84889, 0.7704, 0.80774, 0.96397], [0.09086, 0.85236, 0.76337, 0.80541, 0.96376], [0.09107, 0.84813, 0.76907, 0.80667, 0.96378], [0.09087, 0.85033, 0.7685, 0.80735, 0.96397], [0.08992, 0.85058, 0.77002, 0.8083, 0.96411], [0.08996, 0.8521, 0.7669, 0.80726, 0.96402]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.23443, 0.83807, 0.2537, 0.38949, 0.9222], [0.13956, 0.7926, 0.69964, 0.74322, 0.95271], [0.13098, 0.79683, 0.71245, 0.75228, 0.9541], [0.12461, 0.82106, 0.6982, 0.75466, 0.95559], [0.1179, 0.82865, 0.71217, 0.76601, 0.95744], [0.12066, 0.82294, 0.71279, 0.76391, 0.9569], [0.11096, 0.82533, 0.73428, 0.77715, 0.95881], [0.11086, 0.83001, 0.72433, 0.77358, 0.95852], [0.10525, 0.83358, 0.73803, 0.7829, 0.95996], [0.10376, 0.81282, 0.77962, 0.79587, 0.96088], [0.10328, 0.83783, 0.74734, 0.79, 0.96113], [0.10186, 0.83567, 0.75584, 0.79375, 0.96158], [0.10079, 0.85294, 0.73325, 0.78858, 0.96154], [0.10008, 0.81655, 0.78702, 0.80151, 0.96187], [0.09895, 0.85118, 0.74375, 0.79385, 0.96221], [0.10103, 0.8498, 0.73941, 0.79077, 0.96173], [0.09534, 0.85253, 0.75705, 0.80196, 0.96342], [0.09644, 0.8404, 0.76875, 0.80298, 0.9631], [0.09891, 0.85572, 0.73601, 0.79136, 0.96204], [0.09628, 0.83637, 0.77229, 0.80305, 0.96294], [0.09863, 0.84031, 0.75977, 0.79801, 0.96238], [0.09553, 0.82754, 0.78698, 0.80675, 0.96312], [0.09551, 0.81688, 0.80475, 0.81077, 0.96325], [0.09679, 0.80857, 0.8058, 0.80718, 0.96234], [0.09567, 0.81078, 0.81177, 0.81127, 0.96306], [0.09187, 0.85697, 0.76347, 0.80752, 0.9644], [0.09346, 0.83062, 0.79273, 0.81123, 0.96391], [0.09365, 0.83026, 0.79276, 0.81108, 0.96387], [0.0953, 0.85318, 0.74431, 0.79504, 0.96246], [0.09208, 0.85883, 0.75487, 0.8035, 0.96388], [0.09084, 0.855, 0.76604, 0.80808, 0.96441]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "DRIVE", "data_dir": "datasets/DRIVE/images", "label_dir": "datasets/DRIVE/manual", "mask_dir": "datasets/DRIVE/mask", "label_getter": "<function <lambda> at 0x7f3b0e03b320>", "mask_getter": "<function <lambda> at 0x7f39fc034290>", "split_dir": "net_logs/DRIVE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}