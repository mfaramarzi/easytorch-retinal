{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/DRIVE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_2", "checkpoint": "SPLIT_2.pt", "best_epoch": 28, "best_score": 0.81857, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.30841, 0.46849, 0.71263, 0.56533, 0.89157], [0.14785, 0.78904, 0.69573, 0.73945, 0.95149], [0.1311, 0.80472, 0.70856, 0.75358, 0.95415], [0.125, 0.80972, 0.71441, 0.75908, 0.95513], [0.11748, 0.81858, 0.72175, 0.76712, 0.95664], [0.11158, 0.82039, 0.73866, 0.77738, 0.95814], [0.10921, 0.82448, 0.7394, 0.77963, 0.95864], [0.10702, 0.83381, 0.73375, 0.78059, 0.95918], [0.10545, 0.83118, 0.74165, 0.78387, 0.95953], [0.10349, 0.83671, 0.74112, 0.78602, 0.96007], [0.10207, 0.83584, 0.74735, 0.78912, 0.96048], [0.10236, 0.83516, 0.74447, 0.78721, 0.96018], [0.10069, 0.84158, 0.74272, 0.78907, 0.96071], [0.09881, 0.84086, 0.75315, 0.79459, 0.96147], [0.09851, 0.84452, 0.74877, 0.79377, 0.9615], [0.09893, 0.84173, 0.74912, 0.79273, 0.96124], [0.09715, 0.83953, 0.75828, 0.79684, 0.96174], [0.09861, 0.84107, 0.74927, 0.79252, 0.96118], [0.09684, 0.84333, 0.75407, 0.79621, 0.96181], [0.09668, 0.84677, 0.75067, 0.79583, 0.96189], [0.09705, 0.838, 0.75822, 0.79612, 0.96157], [0.09532, 0.8472, 0.75523, 0.79858, 0.9623], [0.09768, 0.83928, 0.75694, 0.79599, 0.96161], [0.09662, 0.84077, 0.75737, 0.79689, 0.9618], [0.09511, 0.84483, 0.75704, 0.79853, 0.9622], [0.09375, 0.84609, 0.76002, 0.80075, 0.96258], [0.09357, 0.84824, 0.75886, 0.80106, 0.96271], [0.0924, 0.84356, 0.7698, 0.80499, 0.9631], [0.09317, 0.84455, 0.76397, 0.80224, 0.96273], [0.09259, 0.8471, 0.76383, 0.80331, 0.96299], [0.09209, 0.84519, 0.76733, 0.80438, 0.96307]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.24013, 0.86204, 0.17527, 0.29131, 0.9195], [0.13486, 0.85905, 0.62073, 0.7207, 0.95458], [0.12406, 0.83884, 0.65735, 0.73709, 0.95573], [0.12316, 0.76968, 0.73541, 0.75215, 0.95425], [0.11061, 0.81205, 0.72774, 0.76759, 0.9584], [0.11359, 0.76367, 0.78078, 0.77213, 0.9565], [0.10492, 0.82022, 0.73307, 0.7742, 0.95963], [0.10861, 0.77845, 0.75816, 0.76817, 0.9568], [0.11459, 0.73559, 0.80001, 0.76645, 0.95397], [0.09657, 0.84898, 0.73916, 0.79027, 0.96296], [0.10294, 0.8455, 0.71175, 0.77288, 0.96051], [0.12231, 0.72864, 0.79976, 0.76255, 0.95298], [0.11383, 0.7262, 0.82165, 0.77098, 0.95392], [0.10078, 0.80409, 0.7568, 0.77973, 0.95964], [0.09912, 0.84133, 0.71861, 0.77514, 0.96064], [0.10147, 0.78151, 0.79398, 0.7877, 0.9596], [0.10123, 0.77616, 0.80921, 0.79234, 0.95996], [0.09812, 0.83786, 0.74069, 0.78628, 0.96199], [0.09482, 0.83152, 0.76121, 0.79481, 0.9629], [0.09107, 0.85156, 0.75104, 0.79815, 0.96414], [0.10424, 0.78009, 0.76961, 0.77481, 0.95777], [0.09797, 0.79574, 0.78986, 0.79279, 0.96102], [0.10597, 0.7931, 0.74142, 0.76639, 0.95733], [0.09366, 0.83008, 0.7619, 0.79453, 0.9628], [0.09102, 0.86446, 0.73312, 0.79339, 0.96396], [0.09647, 0.77352, 0.83567, 0.80339, 0.96139], [0.12676, 0.68191, 0.85155, 0.75735, 0.94849], [0.08705, 0.84673, 0.79222, 0.81857, 0.96685], [0.09973, 0.78334, 0.79562, 0.78943, 0.95993], [0.09561, 0.82573, 0.7558, 0.78922, 0.96189], [0.08948, 0.84646, 0.76075, 0.80132, 0.96439]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "DRIVE", "data_dir": "datasets/DRIVE/images", "label_dir": "datasets/DRIVE/manual", "mask_dir": "datasets/DRIVE/mask", "label_getter": "<function <lambda> at 0x7f3b0e03b320>", "mask_getter": "<function <lambda> at 0x7f39fc034290>", "split_dir": "net_logs/DRIVE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}