{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/DRIVE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.8481, 0.80524, 0.82611, 0.96693], ["SPLIT_8.json", 0.83081, 0.76595, 0.79706, 0.96111], ["SPLIT_7.json", 0.79472, 0.81938, 0.80686, 0.96407], ["SPLIT_6.json", 0.8464, 0.7572, 0.79932, 0.96361], ["SPLIT_9.json", 0.82199, 0.80759, 0.81473, 0.96407], ["SPLIT_4.json", 0.79218, 0.75019, 0.77061, 0.95209], ["SPLIT_5.json", 0.81362, 0.80151, 0.80752, 0.96163], ["SPLIT_0.json", 0.81717, 0.78315, 0.7998, 0.96122], ["SPLIT_1.json", 0.80873, 0.79497, 0.80179, 0.96063]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_3", "checkpoint": "SPLIT_3.pt", "best_epoch": 29, "best_score": 0.78353, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.31522, 0.45358, 0.73692, 0.56153, 0.88753], [0.14426, 0.80077, 0.70257, 0.74846, 0.95385], [0.12878, 0.81319, 0.71291, 0.75976, 0.95594], [0.12189, 0.82015, 0.71678, 0.76499, 0.95696], [0.11293, 0.82606, 0.73445, 0.77757, 0.95893], [0.10762, 0.83115, 0.7431, 0.78466, 0.96014], [0.10441, 0.83371, 0.74794, 0.7885, 0.96079], [0.1026, 0.84075, 0.74328, 0.78902, 0.96115], [0.1022, 0.83617, 0.74757, 0.78939, 0.96101], [0.09955, 0.84241, 0.74913, 0.79304, 0.96179], [0.0982, 0.83977, 0.75767, 0.79661, 0.96219], [0.09774, 0.84406, 0.75162, 0.79516, 0.96215], [0.09618, 0.84678, 0.75337, 0.79735, 0.96257], [0.09483, 0.8456, 0.7614, 0.80129, 0.96309], [0.0949, 0.84678, 0.75799, 0.79993, 0.96294], [0.09505, 0.84756, 0.75484, 0.79852, 0.96277], [0.09357, 0.84547, 0.76337, 0.80233, 0.96324], [0.09327, 0.84953, 0.75911, 0.80178, 0.96332], [0.09223, 0.84926, 0.76355, 0.80413, 0.96365], [0.09267, 0.85093, 0.75972, 0.80274, 0.96351], [0.09333, 0.84587, 0.76291, 0.80225, 0.96324], [0.09161, 0.84945, 0.76472, 0.80486, 0.96376], [0.09057, 0.84833, 0.76952, 0.80701, 0.96403], [0.09022, 0.84783, 0.7709, 0.80754, 0.96409], [0.09022, 0.84951, 0.76894, 0.80722, 0.96411], [0.08949, 0.851, 0.76978, 0.80835, 0.96433], [0.08958, 0.85317, 0.76622, 0.80736, 0.96426], [0.08821, 0.84895, 0.77762, 0.81172, 0.96474], [0.08837, 0.85049, 0.77349, 0.81016, 0.96457], [0.08812, 0.85087, 0.77412, 0.81068, 0.96466], [0.08868, 0.84859, 0.77339, 0.80925, 0.96437]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.2594, 0.89201, 0.23138, 0.36745, 0.91455], [0.15781, 0.77418, 0.66712, 0.71667, 0.94342], [0.15178, 0.83037, 0.60497, 0.69997, 0.94437], [0.13808, 0.8018, 0.68616, 0.73949, 0.94814], [0.13493, 0.79487, 0.69542, 0.74183, 0.94808], [0.13466, 0.73494, 0.78391, 0.75864, 0.94649], [0.12515, 0.8046, 0.7191, 0.75945, 0.95114], [0.12497, 0.8069, 0.7156, 0.75851, 0.95112], [0.1214, 0.8064, 0.73114, 0.76693, 0.95233], [0.12355, 0.79053, 0.74916, 0.76929, 0.9518], [0.12071, 0.82423, 0.71513, 0.76581, 0.95308], [0.12159, 0.83289, 0.70177, 0.76173, 0.9529], [0.11906, 0.83014, 0.70976, 0.76524, 0.95329], [0.12477, 0.75943, 0.77973, 0.76945, 0.94988], [0.11979, 0.87314, 0.6603, 0.75195, 0.95327], [0.12232, 0.88157, 0.64729, 0.74648, 0.95284], [0.1272, 0.74612, 0.80632, 0.77505, 0.94979], [0.12715, 0.87524, 0.65421, 0.74875, 0.9529], [0.12555, 0.78867, 0.75689, 0.77245, 0.95217], [0.13793, 0.85863, 0.65546, 0.74341, 0.95146], [0.12004, 0.79222, 0.7537, 0.77248, 0.95238], [0.11931, 0.84692, 0.70574, 0.76991, 0.95475], [0.12004, 0.8173, 0.71986, 0.76549, 0.95269], [0.11315, 0.83958, 0.72139, 0.77601, 0.95533], [0.11584, 0.8496, 0.70372, 0.76981, 0.95485], [0.13092, 0.72108, 0.82144, 0.768, 0.94676], [0.17501, 0.60918, 0.87484, 0.71823, 0.92637], [0.12051, 0.76882, 0.7898, 0.77917, 0.95198], [0.11475, 0.80545, 0.76277, 0.78353, 0.95479], [0.11769, 0.85035, 0.70209, 0.76914, 0.95479], [0.11403, 0.80766, 0.74337, 0.77418, 0.95348]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "DRIVE", "data_dir": "datasets/DRIVE/images", "label_dir": "datasets/DRIVE/manual", "mask_dir": "datasets/DRIVE/mask", "label_getter": "<function <lambda> at 0x7f3b0e03b320>", "mask_getter": "<function <lambda> at 0x7f39fc034290>", "split_dir": "net_logs/DRIVE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}