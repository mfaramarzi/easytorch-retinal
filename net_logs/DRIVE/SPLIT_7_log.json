{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/DRIVE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.8481, 0.80524, 0.82611, 0.96693], ["SPLIT_8.json", 0.83081, 0.76595, 0.79706, 0.96111]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_7", "checkpoint": "SPLIT_7.pt", "best_epoch": 26, "best_score": 0.79855, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.32173, 0.46006, 0.73327, 0.56539, 0.88836], [0.14866, 0.79772, 0.68477, 0.73694, 0.95159], [0.13384, 0.80376, 0.69624, 0.74615, 0.95309], [0.12606, 0.80624, 0.71526, 0.75803, 0.95478], [0.12096, 0.81815, 0.71019, 0.76036, 0.95567], [0.11234, 0.82436, 0.73308, 0.77605, 0.9581], [0.10909, 0.83291, 0.7336, 0.78011, 0.95905], [0.10798, 0.83395, 0.73524, 0.78149, 0.95928], [0.10654, 0.83761, 0.73367, 0.7822, 0.95954], [0.10348, 0.83903, 0.74267, 0.78791, 0.96041], [0.10147, 0.84055, 0.74894, 0.79211, 0.96107], [0.10191, 0.84317, 0.74204, 0.78938, 0.96079], [0.10014, 0.84262, 0.74995, 0.79359, 0.96137], [0.09898, 0.8451, 0.74924, 0.79429, 0.96157], [0.09772, 0.84534, 0.75485, 0.79754, 0.96205], [0.0971, 0.8463, 0.75424, 0.79762, 0.9621], [0.09757, 0.84681, 0.75269, 0.79698, 0.96203], [0.09781, 0.84836, 0.74962, 0.79594, 0.96194], [0.09555, 0.84922, 0.75704, 0.80048, 0.96263], [0.0964, 0.84778, 0.75426, 0.79829, 0.96225], [0.09614, 0.84736, 0.75543, 0.79876, 0.9623], [0.09355, 0.85228, 0.75986, 0.80342, 0.96318], [0.09279, 0.8506, 0.76594, 0.80605, 0.9635], [0.0946, 0.84316, 0.76747, 0.80354, 0.96284], [0.09433, 0.85019, 0.76065, 0.80293, 0.96303], [0.09358, 0.84765, 0.76584, 0.80467, 0.96318], [0.09233, 0.85236, 0.76459, 0.80609, 0.96357], [0.09221, 0.85099, 0.76757, 0.80713, 0.96367], [0.09216, 0.84926, 0.7691, 0.80719, 0.96362], [0.09086, 0.85256, 0.77078, 0.80961, 0.9641], [0.09154, 0.85171, 0.76673, 0.80699, 0.96368]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.2641, 0.74462, 0.14175, 0.23816, 0.90958], [0.14304, 0.7995, 0.68661, 0.73877, 0.95159], [0.13183, 0.80792, 0.69211, 0.74554, 0.9529], [0.13247, 0.81771, 0.67549, 0.73983, 0.95263], [0.12889, 0.89444, 0.59653, 0.71572, 0.95275], [0.11818, 0.87046, 0.65478, 0.74737, 0.95587], [0.11979, 0.88405, 0.63821, 0.74128, 0.95558], [0.11314, 0.83511, 0.71377, 0.76969, 0.95741], [0.11471, 0.84764, 0.69653, 0.76469, 0.95726], [0.10976, 0.86954, 0.68381, 0.76557, 0.95825], [0.1095, 0.84758, 0.71693, 0.7768, 0.95892], [0.10757, 0.8776, 0.68131, 0.7671, 0.95875], [0.1083, 0.8454, 0.71377, 0.77403, 0.95845], [0.10384, 0.84136, 0.73894, 0.78683, 0.96008], [0.10902, 0.88403, 0.67016, 0.76238, 0.95835], [0.10517, 0.8727, 0.69014, 0.77076, 0.95907], [0.10199, 0.87014, 0.70945, 0.78162, 0.96047], [0.10082, 0.84739, 0.74078, 0.79051, 0.96085], [0.10634, 0.88457, 0.67707, 0.76703, 0.95899], [0.10554, 0.84968, 0.72412, 0.78189, 0.95972], [0.10151, 0.86747, 0.71006, 0.78091, 0.96028], [0.10103, 0.84257, 0.74929, 0.7932, 0.96105], [0.10033, 0.83973, 0.75238, 0.79366, 0.96099], [0.1062, 0.80423, 0.77423, 0.78894, 0.9587], [0.10128, 0.87384, 0.70639, 0.78124, 0.96056], [0.09889, 0.82869, 0.77053, 0.79855, 0.96124], [0.10154, 0.86065, 0.72472, 0.78686, 0.96085], [0.09897, 0.8653, 0.72508, 0.78901, 0.96134], [0.1042, 0.89313, 0.67762, 0.77059, 0.95977], [0.1003, 0.87934, 0.69568, 0.7768, 0.96014], [0.10139, 0.88941, 0.68659, 0.77495, 0.96024]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "DRIVE", "data_dir": "datasets/DRIVE/images", "label_dir": "datasets/DRIVE/manual", "mask_dir": "datasets/DRIVE/mask", "label_getter": "<function <lambda> at 0x7f3b0e03b320>", "mask_getter": "<function <lambda> at 0x7f39fc034290>", "split_dir": "net_logs/DRIVE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}