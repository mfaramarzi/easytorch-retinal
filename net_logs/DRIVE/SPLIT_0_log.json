{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/DRIVE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.8481, 0.80524, 0.82611, 0.96693], ["SPLIT_8.json", 0.83081, 0.76595, 0.79706, 0.96111], ["SPLIT_7.json", 0.79472, 0.81938, 0.80686, 0.96407], ["SPLIT_6.json", 0.8464, 0.7572, 0.79932, 0.96361], ["SPLIT_9.json", 0.82199, 0.80759, 0.81473, 0.96407], ["SPLIT_4.json", 0.79218, 0.75019, 0.77061, 0.95209], ["SPLIT_5.json", 0.81362, 0.80151, 0.80752, 0.96163]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_0", "checkpoint": "SPLIT_0.pt", "best_epoch": 29, "best_score": 0.80325, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.33114, 0.44132, 0.74224, 0.55353, 0.88259], [0.14873, 0.79579, 0.68888, 0.73849, 0.95216], [0.13328, 0.80345, 0.70413, 0.75052, 0.9541], [0.12334, 0.81345, 0.7148, 0.76094, 0.95596], [0.11703, 0.81961, 0.72664, 0.77033, 0.95751], [0.11063, 0.82784, 0.73633, 0.77941, 0.95913], [0.1077, 0.82992, 0.73969, 0.78221, 0.95961], [0.10593, 0.83664, 0.73564, 0.7829, 0.95999], [0.10416, 0.8354, 0.74199, 0.78593, 0.96036], [0.10281, 0.83996, 0.74124, 0.78752, 0.96078], [0.10146, 0.83837, 0.74685, 0.78997, 0.96106], [0.10098, 0.84101, 0.7435, 0.78925, 0.96107], [0.09886, 0.84506, 0.74882, 0.79403, 0.96191], [0.09705, 0.84461, 0.75488, 0.79723, 0.96234], [0.09734, 0.84554, 0.75229, 0.79619, 0.96223], [0.09633, 0.84904, 0.75081, 0.79691, 0.96247], [0.09527, 0.84539, 0.75939, 0.80009, 0.96279], [0.09529, 0.84571, 0.75752, 0.79919, 0.96267], [0.09453, 0.85055, 0.75577, 0.80036, 0.96303], [0.0952, 0.85059, 0.75236, 0.79847, 0.96276], [0.09485, 0.84704, 0.75729, 0.79965, 0.96279], [0.09485, 0.84838, 0.75644, 0.79978, 0.96286], [0.0937, 0.85089, 0.75873, 0.80217, 0.9633], [0.0926, 0.84916, 0.76436, 0.80453, 0.96358], [0.093, 0.84854, 0.76262, 0.80329, 0.96337], [0.09208, 0.85312, 0.76077, 0.8043, 0.9637], [0.09104, 0.85293, 0.76666, 0.8075, 0.96416], [0.09013, 0.85189, 0.77087, 0.80936, 0.96439], [0.09009, 0.85264, 0.76856, 0.80842, 0.96428], [0.08999, 0.8523, 0.77058, 0.80938, 0.96441], [0.0898, 0.85081, 0.77174, 0.80935, 0.96435]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.28727, 0.9376, 0.02877, 0.05583, 0.90253], [0.15068, 0.88135, 0.5693, 0.69176, 0.94919], [0.13648, 0.80986, 0.67667, 0.7373, 0.9517], [0.12232, 0.83406, 0.69808, 0.76004, 0.95585], [0.11938, 0.8754, 0.65407, 0.74872, 0.95603], [0.11414, 0.8448, 0.71, 0.77156, 0.95789], [0.11539, 0.86143, 0.68653, 0.7641, 0.95754], [0.11449, 0.89807, 0.64355, 0.7498, 0.95698], [0.10838, 0.85534, 0.70807, 0.77477, 0.95877], [0.10482, 0.82093, 0.76065, 0.78964, 0.95941], [0.10563, 0.83541, 0.74463, 0.78741, 0.95973], [0.11134, 0.87385, 0.6786, 0.76395, 0.958], [0.10307, 0.83089, 0.75101, 0.78893, 0.95975], [0.10425, 0.85247, 0.72246, 0.7821, 0.95968], [0.10621, 0.89898, 0.65924, 0.76067, 0.95845], [0.10534, 0.8707, 0.70272, 0.77774, 0.95977], [0.10368, 0.85097, 0.73457, 0.7885, 0.96053], [0.11193, 0.78129, 0.78529, 0.78328, 0.95648], [0.10198, 0.85595, 0.72568, 0.78545, 0.96029], [0.10137, 0.8374, 0.7541, 0.79357, 0.96071], [0.10845, 0.77916, 0.80666, 0.79267, 0.95774], [0.10337, 0.87638, 0.69316, 0.77408, 0.95947], [0.10052, 0.8611, 0.72798, 0.78896, 0.96099], [0.09861, 0.85142, 0.74234, 0.79315, 0.96122], [0.10264, 0.8951, 0.67331, 0.76852, 0.95938], [0.09867, 0.84213, 0.75432, 0.79581, 0.96123], [0.12261, 0.71512, 0.85245, 0.77777, 0.95121], [0.10187, 0.87925, 0.70285, 0.78122, 0.96057], [0.09915, 0.81358, 0.79318, 0.80325, 0.96108], [0.10066, 0.85459, 0.72669, 0.78547, 0.96024], [0.09758, 0.86212, 0.73335, 0.79254, 0.96154]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "DRIVE", "data_dir": "datasets/DRIVE/images", "label_dir": "datasets/DRIVE/manual", "mask_dir": "datasets/DRIVE/mask", "label_getter": "<function <lambda> at 0x7f3b0e03b320>", "mask_getter": "<function <lambda> at 0x7f39fc034290>", "split_dir": "net_logs/DRIVE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}