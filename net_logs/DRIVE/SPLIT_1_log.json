{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/DRIVE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.8481, 0.80524, 0.82611, 0.96693], ["SPLIT_8.json", 0.83081, 0.76595, 0.79706, 0.96111], ["SPLIT_7.json", 0.79472, 0.81938, 0.80686, 0.96407], ["SPLIT_6.json", 0.8464, 0.7572, 0.79932, 0.96361], ["SPLIT_9.json", 0.82199, 0.80759, 0.81473, 0.96407], ["SPLIT_4.json", 0.79218, 0.75019, 0.77061, 0.95209], ["SPLIT_5.json", 0.81362, 0.80151, 0.80752, 0.96163], ["SPLIT_0.json", 0.81717, 0.78315, 0.7998, 0.96122]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_1", "checkpoint": "SPLIT_1.pt", "best_epoch": 17, "best_score": 0.82836, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.32165, 0.44537, 0.73106, 0.55353, 0.88416], [0.14897, 0.78671, 0.69773, 0.73955, 0.95173], [0.13256, 0.80108, 0.70819, 0.75178, 0.95406], [0.12403, 0.81215, 0.71291, 0.7593, 0.9556], [0.11636, 0.81916, 0.7271, 0.77039, 0.95743], [0.11135, 0.82429, 0.73547, 0.77735, 0.95862], [0.10898, 0.82846, 0.73501, 0.77894, 0.95902], [0.10573, 0.83605, 0.73547, 0.78254, 0.95985], [0.10411, 0.83517, 0.74108, 0.78532, 0.9602], [0.10419, 0.8367, 0.73769, 0.78408, 0.96009], [0.1028, 0.83589, 0.74227, 0.7863, 0.96037], [0.10204, 0.8392, 0.74053, 0.78678, 0.96057], [0.09919, 0.84321, 0.74698, 0.79218, 0.9615], [0.09795, 0.84173, 0.75224, 0.79447, 0.96177], [0.09908, 0.84208, 0.74715, 0.79178, 0.9614], [0.09732, 0.84527, 0.74945, 0.79448, 0.96191], [0.09661, 0.84159, 0.75749, 0.79733, 0.96217], [0.09695, 0.84358, 0.75261, 0.7955, 0.96199], [0.09597, 0.84628, 0.75337, 0.79713, 0.96233], [0.09605, 0.8454, 0.75294, 0.7965, 0.96221], [0.09614, 0.84261, 0.75502, 0.79641, 0.96208], [0.09576, 0.84514, 0.75469, 0.79736, 0.96232], [0.09412, 0.8463, 0.76082, 0.80129, 0.96293], [0.09394, 0.84456, 0.76262, 0.8015, 0.9629], [0.09369, 0.84532, 0.7622, 0.80161, 0.96294], [0.09287, 0.85003, 0.75897, 0.80192, 0.96317], [0.09252, 0.85023, 0.76157, 0.80346, 0.9634], [0.09181, 0.84658, 0.76953, 0.80622, 0.96366], [0.09119, 0.8495, 0.76636, 0.80579, 0.96371], [0.09156, 0.84769, 0.76816, 0.80597, 0.96367], [0.09137, 0.84633, 0.76849, 0.80553, 0.96355]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.23016, 0.9496, 0.21986, 0.35705, 0.92275], [0.12824, 0.86408, 0.68601, 0.76482, 0.95884], [0.12616, 0.77116, 0.80533, 0.78787, 0.95769], [0.11335, 0.81221, 0.7868, 0.7993, 0.96145], [0.11427, 0.78876, 0.80411, 0.79636, 0.95988], [0.09783, 0.87335, 0.7536, 0.80907, 0.9653], [0.09923, 0.89071, 0.7298, 0.80227, 0.9649], [0.09622, 0.83743, 0.80049, 0.81854, 0.96538], [0.09438, 0.82941, 0.80111, 0.81501, 0.96452], [0.09351, 0.81968, 0.82198, 0.82083, 0.96499], [0.09476, 0.83083, 0.8076, 0.81905, 0.96519], [0.09073, 0.86519, 0.76924, 0.8144, 0.96579], [0.08819, 0.8578, 0.78963, 0.8223, 0.96671], [0.08948, 0.86557, 0.77572, 0.81819, 0.96637], [0.09067, 0.91505, 0.71482, 0.80264, 0.9657], [0.08698, 0.86533, 0.78449, 0.82293, 0.96707], [0.08844, 0.83251, 0.82425, 0.82836, 0.96668], [0.08797, 0.85016, 0.79797, 0.82324, 0.96657], [0.08463, 0.87123, 0.78602, 0.82643, 0.96779], [0.0908, 0.87622, 0.75785, 0.81275, 0.96593], [0.09238, 0.80976, 0.82677, 0.81818, 0.96415], [0.08694, 0.89098, 0.75197, 0.81559, 0.96683], [0.08552, 0.86319, 0.78978, 0.82485, 0.96728], [0.08553, 0.87305, 0.77533, 0.82129, 0.96708], [0.08528, 0.87318, 0.77856, 0.82316, 0.96737], [0.08391, 0.86434, 0.79237, 0.82679, 0.96761], [0.08756, 0.81351, 0.83887, 0.826, 0.96552], [0.08932, 0.88373, 0.75408, 0.81377, 0.96633], [0.08459, 0.8552, 0.79624, 0.82467, 0.96697], [0.08492, 0.86827, 0.78278, 0.82331, 0.96722], [0.08772, 0.83584, 0.80897, 0.82219, 0.96586]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "DRIVE", "data_dir": "datasets/DRIVE/images", "label_dir": "datasets/DRIVE/manual", "mask_dir": "datasets/DRIVE/mask", "label_getter": "<function <lambda> at 0x7f3b0e03b320>", "mask_getter": "<function <lambda> at 0x7f39fc034290>", "split_dir": "net_logs/DRIVE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}