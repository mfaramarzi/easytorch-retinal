{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/DRIVE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.8481, 0.80524, 0.82611, 0.96693], ["SPLIT_8.json", 0.83081, 0.76595, 0.79706, 0.96111], ["SPLIT_7.json", 0.79472, 0.81938, 0.80686, 0.96407], ["SPLIT_6.json", 0.8464, 0.7572, 0.79932, 0.96361], ["SPLIT_9.json", 0.82199, 0.80759, 0.81473, 0.96407], ["SPLIT_4.json", 0.79218, 0.75019, 0.77061, 0.95209]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_5", "checkpoint": "SPLIT_5.pt", "best_epoch": 28, "best_score": 0.80691, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.30999, 0.46767, 0.72269, 0.56786, 0.89174], [0.14426, 0.80176, 0.69327, 0.74358, 0.95294], [0.13107, 0.80885, 0.70189, 0.75158, 0.95433], [0.12426, 0.81079, 0.71761, 0.76136, 0.95572], [0.11768, 0.82752, 0.71606, 0.76777, 0.95736], [0.11179, 0.82974, 0.73146, 0.77751, 0.9588], [0.10848, 0.83323, 0.7341, 0.78053, 0.95937], [0.10664, 0.84085, 0.73378, 0.78367, 0.96013], [0.10442, 0.83808, 0.74117, 0.78665, 0.96043], [0.10335, 0.84243, 0.7382, 0.78688, 0.96064], [0.10252, 0.83725, 0.74614, 0.78907, 0.96074], [0.10044, 0.84489, 0.74487, 0.79173, 0.96143], [0.0983, 0.8491, 0.74797, 0.79533, 0.96211], [0.09774, 0.84538, 0.75315, 0.7966, 0.96215], [0.09765, 0.84744, 0.75165, 0.79668, 0.96224], [0.0979, 0.84956, 0.74482, 0.79375, 0.9619], [0.0967, 0.84667, 0.7551, 0.79827, 0.96244], [0.0952, 0.85172, 0.75572, 0.80085, 0.96301], [0.0949, 0.84924, 0.75799, 0.80102, 0.96294], [0.09545, 0.8516, 0.75349, 0.79955, 0.96281], [0.0952, 0.84672, 0.75846, 0.80016, 0.96271], [0.09332, 0.85278, 0.75968, 0.80354, 0.96344], [0.09255, 0.85095, 0.76484, 0.8056, 0.96367], [0.09299, 0.84635, 0.76637, 0.80438, 0.96331], [0.09216, 0.85373, 0.7617, 0.80509, 0.9637], [0.09185, 0.85123, 0.76478, 0.80569, 0.96369], [0.09116, 0.85419, 0.76446, 0.80684, 0.96397], [0.09058, 0.85343, 0.76913, 0.80909, 0.96428], [0.09172, 0.85065, 0.76516, 0.80564, 0.96366], [0.09044, 0.85283, 0.76904, 0.80877, 0.96421], [0.09025, 0.84946, 0.7719, 0.80882, 0.96409]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.26465, 0.7323, 0.13823, 0.23256, 0.91269], [0.13431, 0.86486, 0.6193, 0.72177, 0.95431], [0.12203, 0.86018, 0.65507, 0.74374, 0.9568], [0.12162, 0.89215, 0.61785, 0.73009, 0.95628], [0.11355, 0.86794, 0.66874, 0.75543, 0.95856], [0.10751, 0.83622, 0.72432, 0.77626, 0.96004], [0.1125, 0.89245, 0.63686, 0.7433, 0.9579], [0.10654, 0.86743, 0.68561, 0.76588, 0.95989], [0.10293, 0.8668, 0.69527, 0.77162, 0.96061], [0.10528, 0.80953, 0.77326, 0.79098, 0.96089], [0.10322, 0.81707, 0.76483, 0.79009, 0.96111], [0.10227, 0.87448, 0.68299, 0.76696, 0.96028], [0.09988, 0.85798, 0.71344, 0.77906, 0.96127], [0.09787, 0.86285, 0.71672, 0.78303, 0.96199], [0.09932, 0.88434, 0.68645, 0.77293, 0.9614], [0.10134, 0.82944, 0.75903, 0.79267, 0.962], [0.09519, 0.82962, 0.77273, 0.80017, 0.96306], [0.09874, 0.8243, 0.77244, 0.79753, 0.96247], [0.09474, 0.8438, 0.75471, 0.79677, 0.96316], [0.10021, 0.80012, 0.7935, 0.7968, 0.96127], [0.0985, 0.87212, 0.70077, 0.77711, 0.96153], [0.09385, 0.85311, 0.7456, 0.79574, 0.96337], [0.09331, 0.83872, 0.76651, 0.80099, 0.96355], [0.09467, 0.85213, 0.74602, 0.79555, 0.96331], [0.09564, 0.85557, 0.73, 0.78781, 0.96237], [0.09462, 0.82662, 0.77482, 0.79988, 0.9629], [0.09272, 0.82108, 0.79178, 0.80616, 0.96356], [0.09343, 0.81751, 0.79658, 0.80691, 0.96352], [0.09684, 0.87772, 0.70324, 0.78085, 0.96222], [0.09192, 0.8573, 0.74609, 0.79784, 0.96382], [0.09184, 0.87434, 0.72435, 0.79231, 0.96366]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "DRIVE", "data_dir": "datasets/DRIVE/images", "label_dir": "datasets/DRIVE/manual", "mask_dir": "datasets/DRIVE/mask", "label_getter": "<function <lambda> at 0x7f3b0e03b320>", "mask_getter": "<function <lambda> at 0x7f39fc034290>", "split_dir": "net_logs/DRIVE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}