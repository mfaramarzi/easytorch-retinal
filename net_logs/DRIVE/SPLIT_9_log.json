{"num_channel": 1, "num_class": 2, "batch_size": 4, "epochs": 31, "learning_rate": 0.001, "gpus": [0], "pin_memory": true, "num_workers": 2, "phase": "train", "dataset_dir": "datasets", "load_limit": 100000000000.0, "log_dir": "net_logs/DRIVE", "pretrained_path": null, "debug": true, "seed": 11487787094, "force": true, "model_scale": 1, "patience": 31, "load_sparse": true, "num_folds": 10, "global_test_score": [["SPLIT_2.json", 0.8481, 0.80524, 0.82611, 0.96693], ["SPLIT_8.json", 0.83081, 0.76595, 0.79706, 0.96111], ["SPLIT_7.json", 0.79472, 0.81938, 0.80686, 0.96407], ["SPLIT_6.json", 0.8464, 0.7572, 0.79932, 0.96361]], "monitor_metric": "f1", "metric_direction": "maximize", "experiment_id": "SPLIT_9", "checkpoint": "SPLIT_9.pt", "best_epoch": 31, "best_score": 0.80345, "training_log": ["Loss,Precision,Recall,F1,Accuracy", [0.3219, 0.45611, 0.72612, 0.56028, 0.88791], [0.15112, 0.7882, 0.69449, 0.73838, 0.9516], [0.13358, 0.80379, 0.70056, 0.74863, 0.95373], [0.12486, 0.80731, 0.71359, 0.75756, 0.95508], [0.11725, 0.82304, 0.71777, 0.76681, 0.95706], [0.11088, 0.82488, 0.73571, 0.77775, 0.95865], [0.10711, 0.83171, 0.73876, 0.78248, 0.95961], [0.10438, 0.83549, 0.74346, 0.78679, 0.96037], [0.1033, 0.83715, 0.74403, 0.78785, 0.96059], [0.10333, 0.83961, 0.73784, 0.78544, 0.96035], [0.09951, 0.83922, 0.754, 0.79433, 0.9616], [0.09897, 0.84235, 0.75192, 0.79457, 0.96176], [0.09784, 0.8438, 0.75159, 0.79503, 0.96188], [0.09728, 0.84762, 0.75017, 0.79592, 0.96217], [0.09708, 0.84377, 0.75431, 0.79654, 0.9621], [0.09616, 0.84925, 0.75248, 0.79794, 0.96252], [0.09645, 0.8467, 0.75372, 0.79751, 0.96236], [0.0953, 0.8453, 0.75899, 0.79982, 0.96264], [0.09454, 0.84932, 0.75576, 0.79981, 0.96279], [0.09449, 0.84696, 0.75753, 0.79975, 0.96269], [0.09417, 0.84919, 0.75662, 0.80024, 0.96285], [0.0932, 0.84918, 0.76098, 0.80266, 0.9632], [0.09343, 0.84788, 0.76102, 0.80211, 0.96307], [0.0921, 0.84716, 0.76791, 0.80559, 0.96355], [0.09285, 0.85153, 0.75956, 0.80292, 0.96333], [0.09189, 0.85355, 0.76018, 0.80416, 0.96359], [0.09167, 0.84696, 0.76856, 0.80586, 0.96358], [0.09066, 0.8537, 0.7645, 0.80664, 0.96395], [0.09006, 0.85154, 0.76954, 0.80847, 0.96414], [0.09047, 0.85086, 0.76673, 0.80661, 0.96384], [0.08984, 0.85235, 0.76836, 0.80818, 0.96413]], "validation_log": ["Loss,Precision,Recall,F1,Accuracy", [0.28092, 0.98387, 0.08371, 0.15429, 0.90924], [0.15008, 0.88402, 0.54953, 0.67775, 0.94832], [0.12724, 0.82678, 0.69525, 0.75533, 0.95545], [0.12152, 0.84055, 0.69474, 0.76072, 0.95678], [0.11441, 0.85465, 0.695, 0.7666, 0.95814], [0.10974, 0.87142, 0.69197, 0.7714, 0.95944], [0.11164, 0.7883, 0.78968, 0.78899, 0.95823], [0.11045, 0.83841, 0.72133, 0.77548, 0.95869], [0.11398, 0.83375, 0.71487, 0.76975, 0.9577], [0.10715, 0.81602, 0.76935, 0.792, 0.96003], [0.10264, 0.87052, 0.70254, 0.77756, 0.96025], [0.10303, 0.87091, 0.69935, 0.77576, 0.96001], [0.10294, 0.83719, 0.75304, 0.79289, 0.96109], [0.10146, 0.82221, 0.76877, 0.79459, 0.96069], [0.10139, 0.84638, 0.7425, 0.79104, 0.9612], [0.10102, 0.86079, 0.72327, 0.78606, 0.96106], [0.10174, 0.85133, 0.73482, 0.7888, 0.96108], [0.10038, 0.86301, 0.71589, 0.7826, 0.96066], [0.10116, 0.83392, 0.7466, 0.78785, 0.96023], [0.10158, 0.83419, 0.74268, 0.78578, 0.95995], [0.10169, 0.85957, 0.72069, 0.78403, 0.96073], [0.09943, 0.84481, 0.75045, 0.79484, 0.96168], [0.10146, 0.8094, 0.78398, 0.79649, 0.96038], [0.09944, 0.84582, 0.74001, 0.78939, 0.96095], [0.10019, 0.85174, 0.73389, 0.78844, 0.96105], [0.09843, 0.83942, 0.75668, 0.79591, 0.96162], [0.10035, 0.87692, 0.70511, 0.78169, 0.96105], [0.09616, 0.84558, 0.76157, 0.80138, 0.96266], [0.09665, 0.8375, 0.7633, 0.79868, 0.96194], [0.10746, 0.76505, 0.8298, 0.79611, 0.95796], [0.09645, 0.82752, 0.78075, 0.80345, 0.96222]], "test_score": ["Split,Precision,Recall,F1,Accuracy"], "name": "DRIVE", "data_dir": "datasets/DRIVE/images", "label_dir": "datasets/DRIVE/manual", "mask_dir": "datasets/DRIVE/mask", "label_getter": "<function <lambda> at 0x7f3b0e03b320>", "mask_getter": "<function <lambda> at 0x7f39fc034290>", "split_dir": "net_logs/DRIVE/splits", "model": "UNet(\n  (A1_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A_mid): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A4_up): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))\n  (_A4): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A3_up): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))\n  (_A3): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A2_up): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))\n  (_A2): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (A1_up): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))\n  (_A1): _DoubleConvolution(\n    (encode): Sequential(\n      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1))\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): ReLU(inplace=True)\n    )\n  )\n  (final): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))\n)", "device": "cuda:0", "adam": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)"}